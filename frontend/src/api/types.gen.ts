// This file is auto-generated by @hey-api/openapi-ts

export type AlbumAddImageInSchema = {
  /**
   * The id of the image to add to the album
   */
  image_ids?: Array<number>;
};

export type AlbumBasicReadOutSchema = {
  /**
   * The description of the album
   */
  description?: string | null;
  /**
   * IDs of Groups allowed to edit
   */
  edit_group_ids?: Array<number>;
  /**
   * The id of the album
   */
  id: number;
  /**
   * The count of images in this album
   */
  image_count: number;
  /**
   * The name of the album
   */
  name: string;
  /**
   * IDs of Groups allowed to view
   */
  view_group_ids?: Array<number>;
};

export type AlbumCreateInSchema = {
  /**
   * The description of the album
   */
  description?: string | null;
  /**
   * IDs of Groups allowed to edit
   */
  edit_group_ids?: Array<number>;
  /**
   * The name of the album
   */
  name: string;
  /**
   * IDs of Groups allowed to view
   */
  view_group_ids?: Array<number>;
};

export type AlbumRemoveImageInSchema = {
  /**
   * The id of the image to remove from the album
   */
  image_ids?: Array<number>;
};

export type AlbumSortUpdateInSchema = {
  /**
   * The new order of the images, with the index being the new position in the album
   */
  sorting: Array<number>;
};

export type AlbumUpdateInSchema = {
  /**
   * The new description of the album
   */
  description?: string | null;
  /**
   * New list of Group IDs allowed to edit
   */
  edit_group_ids?: Array<number> | null;
  /**
   * The new name of the album
   */
  name?: string | null;
  /**
   * New list of Group IDs allowed to view
   */
  view_group_ids?: Array<number> | null;
};

export type AlbumWithImagesReadInSchema = {
  /**
   * The description of the album
   */
  description?: string | null;
  /**
   * IDs of Groups allowed to edit
   */
  edit_group_ids?: Array<number>;
  /**
   * The id of the album
   */
  id: number;
  /**
   * The count of images in this album
   */
  image_count: number;
  /**
   * The ids of the images in this album in sorted order
   */
  image_ids: Array<number>;
  /**
   * The name of the album
   */
  name: string;
  /**
   * IDs of Groups allowed to view
   */
  view_group_ids?: Array<number>;
};

export type AuthLoginSchemaReadable = {
  username: string;
};

export type AuthLoginSchemaWritable = {
  password: string;
  username: string;
};

export type BreadcrumbSchema = {
  id: number;
  name: string;
};

export type CsrfTokenOutSchema = {
  csrf_token: string;
};

export type FolderDetailSchema = {
  breadcrumbs: Array<BreadcrumbSchema>;
  child_folders: Array<RootFolderSchema>;
  folder_images: Array<number>;
  has_children: boolean;
  id: number;
  name: string;
};

export type GroupCreateInSchema = {
  name: string;
};

export type GroupOutSchema = {
  id: number;
  name: string;
};

export type GroupUpdateInSchema = {
  name: string;
};

export type ImageDateSchema = {
  date: string;
  day_valid: boolean;
  month_valid: boolean;
};

export type ImageLocationSchema = {
  city: string | null;
  country_code: string;
  country_name: string;
  sub_location: string | null;
  subdivision_code: string | null;
  subdivision_name: string | null;
};

export type ImageMetadataSchema = {
  created_at: string;
  description: string | null;
  file_size: number;
  larger_size_url: string;
  id: number;
  image_fs_id: string;
  orientation: RotationEnum;
  original_checksum: string;
  original_height: number;
  original_path: string;
  original_width: number;
  phash: string;
  title: string;
  updated_at: string;
};

export type ImageThumbnailSchema = {
  id: number;
  thumbnail_height: number;
  thumbnail_url: string;
  thumbnail_width: number;
  title: string;
};

export type ImagesPerPageChoices = 10 | 20 | 30 | 40 | 50 | 60 | 70 | 80 | 90 | 100;

export type Input = {
  limit?: number;
  offset?: number;
};

export type PagedPersonImageOutSchema = {
  count: number;
  items: Array<PersonImageOutSchema>;
};

export type PersonDetailOutSchema = {
  description?: string | null;
  id: number;
  image_count: number;
  name: string;
};

export type PersonImageOutSchema = {
  /**
   * One image the person appears in
   */
  id: number;
};

/**
 * Schema for representing a PersonInImage instance.
 * Details a specific person's bounding box in an image.
 */
export type PersonInImageSchemaOut = {
  center_x: number;
  center_y: number;
  height: number;
  id: number;
  name: string;
  person_id: number;
  width: number;
};

/**
 * Schema when reading a person
 */
export type PersonReadOutSchema = {
  description?: string | null;
  id: number;
  image_count: number;
  name: string;
};

/**
 * Schema for representing a PetInImage instance.
 * Details a specific pet's bounding box in an image.
 */
export type PetInImageSchemaOut = {
  center_x: number;
  center_y: number;
  height: number;
  id: number;
  name: string;
  pet_id?: number | null;
  width: number;
};

export type RootFolderSchema = {
  child_count?: number;
  description: string | null;
  id: number;
  image_count?: number;
  name: string;
};

/**
 * https://exiftool.org/TagNames/EXIF.html (0x0112)
 */
export type RotationEnum = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;

export type TimezoneChoices =
  | "Africa/Abidjan"
  | "Africa/Accra"
  | "Africa/Addis_Ababa"
  | "Africa/Algiers"
  | "Africa/Asmara"
  | "Africa/Asmera"
  | "Africa/Bamako"
  | "Africa/Bangui"
  | "Africa/Banjul"
  | "Africa/Bissau"
  | "Africa/Blantyre"
  | "Africa/Brazzaville"
  | "Africa/Bujumbura"
  | "Africa/Cairo"
  | "Africa/Casablanca"
  | "Africa/Ceuta"
  | "Africa/Conakry"
  | "Africa/Dakar"
  | "Africa/Dar_es_Salaam"
  | "Africa/Djibouti"
  | "Africa/Douala"
  | "Africa/El_Aaiun"
  | "Africa/Freetown"
  | "Africa/Gaborone"
  | "Africa/Harare"
  | "Africa/Johannesburg"
  | "Africa/Juba"
  | "Africa/Kampala"
  | "Africa/Khartoum"
  | "Africa/Kigali"
  | "Africa/Kinshasa"
  | "Africa/Lagos"
  | "Africa/Libreville"
  | "Africa/Lome"
  | "Africa/Luanda"
  | "Africa/Lubumbashi"
  | "Africa/Lusaka"
  | "Africa/Malabo"
  | "Africa/Maputo"
  | "Africa/Maseru"
  | "Africa/Mbabane"
  | "Africa/Mogadishu"
  | "Africa/Monrovia"
  | "Africa/Nairobi"
  | "Africa/Ndjamena"
  | "Africa/Niamey"
  | "Africa/Nouakchott"
  | "Africa/Ouagadougou"
  | "Africa/Porto-Novo"
  | "Africa/Sao_Tome"
  | "Africa/Timbuktu"
  | "Africa/Tripoli"
  | "Africa/Tunis"
  | "Africa/Windhoek"
  | "America/Adak"
  | "America/Anchorage"
  | "America/Anguilla"
  | "America/Antigua"
  | "America/Araguaina"
  | "America/Argentina/Buenos_Aires"
  | "America/Argentina/Catamarca"
  | "America/Argentina/ComodRivadavia"
  | "America/Argentina/Cordoba"
  | "America/Argentina/Jujuy"
  | "America/Argentina/La_Rioja"
  | "America/Argentina/Mendoza"
  | "America/Argentina/Rio_Gallegos"
  | "America/Argentina/Salta"
  | "America/Argentina/San_Juan"
  | "America/Argentina/San_Luis"
  | "America/Argentina/Tucuman"
  | "America/Argentina/Ushuaia"
  | "America/Aruba"
  | "America/Asuncion"
  | "America/Atikokan"
  | "America/Atka"
  | "America/Bahia"
  | "America/Bahia_Banderas"
  | "America/Barbados"
  | "America/Belem"
  | "America/Belize"
  | "America/Blanc-Sablon"
  | "America/Boa_Vista"
  | "America/Bogota"
  | "America/Boise"
  | "America/Buenos_Aires"
  | "America/Cambridge_Bay"
  | "America/Campo_Grande"
  | "America/Cancun"
  | "America/Caracas"
  | "America/Catamarca"
  | "America/Cayenne"
  | "America/Cayman"
  | "America/Chicago"
  | "America/Chihuahua"
  | "America/Ciudad_Juarez"
  | "America/Coral_Harbour"
  | "America/Cordoba"
  | "America/Costa_Rica"
  | "America/Coyhaique"
  | "America/Creston"
  | "America/Cuiaba"
  | "America/Curacao"
  | "America/Danmarkshavn"
  | "America/Dawson"
  | "America/Dawson_Creek"
  | "America/Denver"
  | "America/Detroit"
  | "America/Dominica"
  | "America/Edmonton"
  | "America/Eirunepe"
  | "America/El_Salvador"
  | "America/Ensenada"
  | "America/Fort_Nelson"
  | "America/Fort_Wayne"
  | "America/Fortaleza"
  | "America/Glace_Bay"
  | "America/Godthab"
  | "America/Goose_Bay"
  | "America/Grand_Turk"
  | "America/Grenada"
  | "America/Guadeloupe"
  | "America/Guatemala"
  | "America/Guayaquil"
  | "America/Guyana"
  | "America/Halifax"
  | "America/Havana"
  | "America/Hermosillo"
  | "America/Indiana/Indianapolis"
  | "America/Indiana/Knox"
  | "America/Indiana/Marengo"
  | "America/Indiana/Petersburg"
  | "America/Indiana/Tell_City"
  | "America/Indiana/Vevay"
  | "America/Indiana/Vincennes"
  | "America/Indiana/Winamac"
  | "America/Indianapolis"
  | "America/Inuvik"
  | "America/Iqaluit"
  | "America/Jamaica"
  | "America/Jujuy"
  | "America/Juneau"
  | "America/Kentucky/Louisville"
  | "America/Kentucky/Monticello"
  | "America/Knox_IN"
  | "America/Kralendijk"
  | "America/La_Paz"
  | "America/Lima"
  | "America/Los_Angeles"
  | "America/Louisville"
  | "America/Lower_Princes"
  | "America/Maceio"
  | "America/Managua"
  | "America/Manaus"
  | "America/Marigot"
  | "America/Martinique"
  | "America/Matamoros"
  | "America/Mazatlan"
  | "America/Mendoza"
  | "America/Menominee"
  | "America/Merida"
  | "America/Metlakatla"
  | "America/Mexico_City"
  | "America/Miquelon"
  | "America/Moncton"
  | "America/Monterrey"
  | "America/Montevideo"
  | "America/Montreal"
  | "America/Montserrat"
  | "America/Nassau"
  | "America/New_York"
  | "America/Nipigon"
  | "America/Nome"
  | "America/Noronha"
  | "America/North_Dakota/Beulah"
  | "America/North_Dakota/Center"
  | "America/North_Dakota/New_Salem"
  | "America/Nuuk"
  | "America/Ojinaga"
  | "America/Panama"
  | "America/Pangnirtung"
  | "America/Paramaribo"
  | "America/Phoenix"
  | "America/Port-au-Prince"
  | "America/Port_of_Spain"
  | "America/Porto_Acre"
  | "America/Porto_Velho"
  | "America/Puerto_Rico"
  | "America/Punta_Arenas"
  | "America/Rainy_River"
  | "America/Rankin_Inlet"
  | "America/Recife"
  | "America/Regina"
  | "America/Resolute"
  | "America/Rio_Branco"
  | "America/Rosario"
  | "America/Santa_Isabel"
  | "America/Santarem"
  | "America/Santiago"
  | "America/Santo_Domingo"
  | "America/Sao_Paulo"
  | "America/Scoresbysund"
  | "America/Shiprock"
  | "America/Sitka"
  | "America/St_Barthelemy"
  | "America/St_Johns"
  | "America/St_Kitts"
  | "America/St_Lucia"
  | "America/St_Thomas"
  | "America/St_Vincent"
  | "America/Swift_Current"
  | "America/Tegucigalpa"
  | "America/Thule"
  | "America/Thunder_Bay"
  | "America/Tijuana"
  | "America/Toronto"
  | "America/Tortola"
  | "America/Vancouver"
  | "America/Virgin"
  | "America/Whitehorse"
  | "America/Winnipeg"
  | "America/Yakutat"
  | "America/Yellowknife"
  | "Antarctica/Casey"
  | "Antarctica/Davis"
  | "Antarctica/DumontDUrville"
  | "Antarctica/Macquarie"
  | "Antarctica/Mawson"
  | "Antarctica/McMurdo"
  | "Antarctica/Palmer"
  | "Antarctica/Rothera"
  | "Antarctica/South_Pole"
  | "Antarctica/Syowa"
  | "Antarctica/Troll"
  | "Antarctica/Vostok"
  | "Arctic/Longyearbyen";

export type UserGroupAssignInSchema = {
  id: number;
};

export type UserInCreateSchemaReadable = {
  email?: string | null;
  first_name?: string | null;
  is_active?: boolean;
  is_staff?: boolean;
  is_superuser?: boolean;
  last_name?: string | null;
  username: string;
};

export type UserInCreateSchemaWritable = {
  email?: string | null;
  first_name?: string | null;
  is_active?: boolean;
  is_staff?: boolean;
  is_superuser?: boolean;
  last_name?: string | null;
  password: string;
  username: string;
};

export type UserOutSchema = {
  email?: string | null;
  first_name: string;
  id: number;
  is_active?: boolean;
  is_staff?: boolean;
  is_superuser?: boolean;
  last_name: string;
  username: string;
};

export type UserProfileOutSchema = {
  bio: string | null;
  items_per_page: ImagesPerPageChoices;
  timezone_name: TimezoneChoices;
};

export type UserProfileUpdateSchema = {
  bio?: string | null;
  items_per_page?: ImagesPerPageChoices | null;
  timezone_name?: TimezoneChoices | null;
};

export type UserUpdateInSchemeReadable = {
  email?: string | null;
  first_name?: string | null;
  is_active?: boolean | null;
  is_staff?: boolean | null;
  is_superuser?: boolean | null;
  last_name?: string | null;
  password?: string | null;
};

export type UserUpdateInSchemeWritable = {
  email?: string | null;
  first_name?: string | null;
  is_active?: boolean | null;
  is_staff?: boolean | null;
  is_superuser?: boolean | null;
  last_name?: string | null;
  password?: string | null;
};

export type GetAlbumsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/album/";
};

export type GetAlbumsResponses = {
  /**
   * OK
   */
  200: Array<AlbumBasicReadOutSchema>;
};

export type GetAlbumsResponse = GetAlbumsResponses[keyof GetAlbumsResponses];

export type CreateAlbumData = {
  body: AlbumCreateInSchema;
  path?: never;
  query?: never;
  url: "/api/album/";
};

export type CreateAlbumResponses = {
  /**
   * Created
   */
  201: AlbumBasicReadOutSchema;
};

export type CreateAlbumResponse = CreateAlbumResponses[keyof CreateAlbumResponses];

export type DeleteAlbumData = {
  body?: never;
  path: {
    album_id: number;
  };
  query?: never;
  url: "/api/album/{album_id}/";
};

export type DeleteAlbumResponses = {
  /**
   * No Content
   */
  204: void;
};

export type DeleteAlbumResponse = DeleteAlbumResponses[keyof DeleteAlbumResponses];

export type GetSingleAlbumInfoData = {
  body?: never;
  path: {
    album_id: number;
  };
  query?: never;
  url: "/api/album/{album_id}/";
};

export type GetSingleAlbumInfoErrors = {
  /**
   * Album not found or inaccessible
   */
  404: unknown;
};

export type GetSingleAlbumInfoResponses = {
  /**
   * OK
   */
  200: AlbumWithImagesReadInSchema;
};

export type GetSingleAlbumInfoResponse =
  GetSingleAlbumInfoResponses[keyof GetSingleAlbumInfoResponses];

export type UpdateAlbumInfoData = {
  body: AlbumUpdateInSchema;
  path: {
    album_id: number;
  };
  query?: never;
  url: "/api/album/{album_id}/";
};

export type UpdateAlbumInfoErrors = {
  /**
   * Album not found or inaccessible
   */
  404: unknown;
};

export type UpdateAlbumInfoResponses = {
  /**
   * OK
   */
  200: AlbumBasicReadOutSchema;
};

export type UpdateAlbumInfoResponse = UpdateAlbumInfoResponses[keyof UpdateAlbumInfoResponses];

export type AddImageToAlbumData = {
  body: AlbumAddImageInSchema;
  path: {
    album_id: number;
  };
  query?: never;
  url: "/api/album/{album_id}/add/";
};

export type AddImageToAlbumResponses = {
  /**
   * OK
   */
  200: AlbumWithImagesReadInSchema;
};

export type AddImageToAlbumResponse = AddImageToAlbumResponses[keyof AddImageToAlbumResponses];

export type DownloadAlbumData = {
  body?: never;
  path: {
    album_id: number;
  };
  query?: {
    zip_originals?: boolean;
  };
  url: "/api/album/{album_id}/download/";
};

export type DownloadAlbumResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type DeleteImageFromAlbumData = {
  body: AlbumRemoveImageInSchema;
  path: {
    album_id: number;
  };
  query?: never;
  url: "/api/album/{album_id}/remove/";
};

export type DeleteImageFromAlbumResponses = {
  /**
   * OK
   */
  200: AlbumWithImagesReadInSchema;
};

export type DeleteImageFromAlbumResponse =
  DeleteImageFromAlbumResponses[keyof DeleteImageFromAlbumResponses];

export type UpdateAlbumSortingData = {
  body: AlbumSortUpdateInSchema;
  path: {
    album_id: number;
  };
  query?: never;
  url: "/api/album/{album_id}/sort/";
};

export type UpdateAlbumSortingErrors = {
  /**
   * Sorting list mismatch with album contents
   */
  400: unknown;
  /**
   * Album not found or inaccessible
   */
  404: unknown;
};

export type UpdateAlbumSortingResponses = {
  /**
   * OK
   */
  200: AlbumWithImagesReadInSchema;
};

export type UpdateAlbumSortingResponse =
  UpdateAlbumSortingResponses[keyof UpdateAlbumSortingResponses];

export type AuthGetCsrfTokenData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/auth/csrf/";
};

export type AuthGetCsrfTokenResponses = {
  /**
   * OK
   */
  200: CsrfTokenOutSchema;
};

export type AuthGetCsrfTokenResponse = AuthGetCsrfTokenResponses[keyof AuthGetCsrfTokenResponses];

export type AuthLoginData = {
  body: AuthLoginSchemaWritable;
  path?: never;
  query?: never;
  url: "/api/auth/login/";
};

export type AuthLoginErrors = {
  /**
   * username or password not provided
   */
  400: unknown;
  /**
   * invalid username or password provided
   */
  401: unknown;
};

export type AuthLoginResponses = {
  /**
   * No Content
   */
  204: void;
};

export type AuthLoginResponse = AuthLoginResponses[keyof AuthLoginResponses];

export type AuthLogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/auth/logout/";
};

export type AuthLogoutResponses = {
  /**
   * No Content
   */
  204: void;
};

export type AuthLogoutResponse = AuthLogoutResponses[keyof AuthLogoutResponses];

export type FolderListRootsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/folder/";
};

export type FolderListRootsResponses = {
  /**
   * OK
   */
  200: Array<RootFolderSchema>;
};

export type FolderListRootsResponse = FolderListRootsResponses[keyof FolderListRootsResponses];

export type FolderGetDetailsData = {
  body?: never;
  path: {
    folder_id: number;
  };
  query?: never;
  url: "/api/folder/{folder_id}/";
};

export type FolderGetDetailsResponses = {
  /**
   * OK
   */
  200: FolderDetailSchema;
};

export type FolderGetDetailsResponse = FolderGetDetailsResponses[keyof FolderGetDetailsResponses];

export type GroupGetAllData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/groups/";
};

export type GroupGetAllResponses = {
  /**
   * OK
   */
  200: Array<GroupOutSchema>;
};

export type GroupGetAllResponse = GroupGetAllResponses[keyof GroupGetAllResponses];

export type GroupsCreateData = {
  body: GroupCreateInSchema | Array<GroupCreateInSchema>;
  path?: never;
  query?: never;
  url: "/api/groups/";
};

export type GroupsCreateResponses = {
  /**
   * OK
   */
  200: Array<GroupOutSchema>;
};

export type GroupsCreateResponse = GroupsCreateResponses[keyof GroupsCreateResponses];

export type GroupDeleteSingleData = {
  body?: never;
  path: {
    group_id: number;
  };
  query?: never;
  url: "/api/groups/{group_id}/";
};

export type GroupDeleteSingleResponses = {
  /**
   * No Content
   */
  204: void;
};

export type GroupDeleteSingleResponse =
  GroupDeleteSingleResponses[keyof GroupDeleteSingleResponses];

export type GroupGetSingleData = {
  body?: never;
  path: {
    group_id: number;
  };
  query?: never;
  url: "/api/groups/{group_id}/";
};

export type GroupGetSingleResponses = {
  /**
   * OK
   */
  200: GroupOutSchema;
};

export type GroupGetSingleResponse = GroupGetSingleResponses[keyof GroupGetSingleResponses];

export type GroupUpdateSingleData = {
  body: GroupUpdateInSchema;
  path: {
    group_id: number;
  };
  query?: never;
  url: "/api/groups/{group_id}/";
};

export type GroupUpdateSingleResponses = {
  /**
   * OK
   */
  200: GroupOutSchema;
};

export type GroupUpdateSingleResponse =
  GroupUpdateSingleResponses[keyof GroupUpdateSingleResponses];

export type ImageGetDateData = {
  body?: never;
  path: {
    image_id: number;
  };
  query?: never;
  url: "/api/image/{image_id}/date/";
};

export type ImageGetDateErrors = {
  /**
   * The user does not have permissions for this image
   */
  401: unknown;
  /**
   * The image does not exist
   */
  404: unknown;
};

export type ImageGetDateResponses = {
  /**
   * OK
   */
  200: ImageDateSchema;
  /**
   * The image has no date
   */
  204: void;
};

export type ImageGetDateResponse = ImageGetDateResponses[keyof ImageGetDateResponses];

export type ImageGetLocationData = {
  body?: never;
  path: {
    image_id: number;
  };
  query?: never;
  url: "/api/image/{image_id}/location/";
};

export type ImageGetLocationErrors = {
  /**
   * The user does not have permissions for this image
   */
  401: unknown;
  /**
   * The image does not exist
   */
  404: unknown;
};

export type ImageGetLocationResponses = {
  /**
   * OK
   */
  200: ImageLocationSchema;
  /**
   * The image has no location
   */
  204: void;
};

export type ImageGetLocationResponse = ImageGetLocationResponses[keyof ImageGetLocationResponses];

export type ImageGetMetadataData = {
  body?: never;
  path: {
    image_id: number;
  };
  query?: never;
  url: "/api/image/{image_id}/metadata/";
};

export type ImageGetMetadataResponses = {
  /**
   * OK
   */
  200: ImageMetadataSchema;
};

export type ImageGetMetadataResponse = ImageGetMetadataResponses[keyof ImageGetMetadataResponses];

export type ImageGetPeopleData = {
  body?: never;
  path: {
    image_id: number;
  };
  query?: never;
  url: "/api/image/{image_id}/people/";
};

export type ImageGetPeopleResponses = {
  /**
   * OK
   */
  200: Array<PersonInImageSchemaOut>;
};

export type ImageGetPeopleResponse = ImageGetPeopleResponses[keyof ImageGetPeopleResponses];

export type ImageGetPetsData = {
  body?: never;
  path: {
    image_id: number;
  };
  query?: never;
  url: "/api/image/{image_id}/pets/";
};

export type ImageGetPetsResponses = {
  /**
   * OK
   */
  200: Array<PetInImageSchemaOut>;
};

export type ImageGetPetsResponse = ImageGetPetsResponses[keyof ImageGetPetsResponses];

export type ImageGetThumbInfoData = {
  body?: never;
  path: {
    image_id: number;
  };
  query?: never;
  url: "/api/image/{image_id}/thumbnail/";
};

export type ImageGetThumbInfoResponses = {
  /**
   * OK
   */
  200: ImageThumbnailSchema;
};

export type ImageGetThumbInfoResponse =
  ImageGetThumbInfoResponses[keyof ImageGetThumbInfoResponses];

export type GetAllPeopleData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/person/";
};

export type GetAllPeopleResponses = {
  /**
   * OK
   */
  200: Array<PersonReadOutSchema>;
};

export type GetAllPeopleResponse = GetAllPeopleResponses[keyof GetAllPeopleResponses];

export type GetPersonDetailData = {
  body?: never;
  path: {
    person_id: number;
  };
  query?: never;
  url: "/api/person/{person_id}/";
};

export type GetPersonDetailResponses = {
  /**
   * OK
   */
  200: PersonDetailOutSchema;
};

export type GetPersonDetailResponse = GetPersonDetailResponses[keyof GetPersonDetailResponses];

export type GetPersonImagesData = {
  body?: never;
  path: {
    person_id: number;
  };
  query?: {
    limit?: number;
    offset?: number;
  };
  url: "/api/person/{person_id}/images/";
};

export type GetPersonImagesResponses = {
  /**
   * OK
   */
  200: PagedPersonImageOutSchema;
};

export type GetPersonImagesResponse = GetPersonImagesResponses[keyof GetPersonImagesResponses];

export type UserGetAllData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/user/";
};

export type UserGetAllResponses = {
  /**
   * OK
   */
  200: Array<UserOutSchema>;
};

export type UserGetAllResponse = UserGetAllResponses[keyof UserGetAllResponses];

export type UserCreateData = {
  body: UserInCreateSchemaWritable;
  path?: never;
  query?: never;
  url: "/api/user/";
};

export type UserCreateResponses = {
  /**
   * OK
   */
  200: UserOutSchema;
};

export type UserCreateResponse = UserCreateResponses[keyof UserCreateResponses];

export type UserGetMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/user/me/";
};

export type UserGetMeResponses = {
  /**
   * OK
   */
  200: UserOutSchema;
};

export type UserGetMeResponse = UserGetMeResponses[keyof UserGetMeResponses];

export type UserGetMyProfileData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/user/me/profile/";
};

export type UserGetMyProfileResponses = {
  /**
   * OK
   */
  200: UserProfileOutSchema;
};

export type UserGetMyProfileResponse = UserGetMyProfileResponses[keyof UserGetMyProfileResponses];

export type UserGetGroupsData = {
  body?: never;
  path: {
    user_id: number;
  };
  query?: never;
  url: "/api/user/{user_id}/groups/";
};

export type UserGetGroupsResponses = {
  /**
   * OK
   */
  200: Array<GroupOutSchema>;
};

export type UserGetGroupsResponse = UserGetGroupsResponses[keyof UserGetGroupsResponses];

export type UserSetGroupsData = {
  body: Array<UserGroupAssignInSchema>;
  path: {
    user_id: number;
  };
  query?: never;
  url: "/api/user/{user_id}/groups/";
};

export type UserSetGroupsErrors = {
  /**
   * some provided groups don't exist
   */
  400: unknown;
};

export type UserSetGroupsResponses = {
  /**
   * OK
   */
  200: Array<GroupOutSchema>;
};

export type UserSetGroupsResponse = UserSetGroupsResponses[keyof UserSetGroupsResponses];

export type UserGetInfoData = {
  body?: never;
  path: {
    user_id: number;
  };
  query?: never;
  url: "/api/user/{user_id}/info/";
};

export type UserGetInfoResponses = {
  /**
   * OK
   */
  200: UserOutSchema;
};

export type UserGetInfoResponse = UserGetInfoResponses[keyof UserGetInfoResponses];

export type UserSetInfoData = {
  body: UserUpdateInSchemeWritable;
  path: {
    user_id: number;
  };
  query?: never;
  url: "/api/user/{user_id}/info/";
};

export type UserSetInfoResponses = {
  /**
   * OK
   */
  200: UserOutSchema;
};

export type UserSetInfoResponse = UserSetInfoResponses[keyof UserSetInfoResponses];

export type UserGetProfileData = {
  body?: never;
  path: {
    user_id: number;
  };
  query?: never;
  url: "/api/user/{user_id}/profile/";
};

export type UserGetProfileResponses = {
  /**
   * OK
   */
  200: UserProfileOutSchema;
};

export type UserGetProfileResponse = UserGetProfileResponses[keyof UserGetProfileResponses];

export type UserEditProfileData = {
  body: UserProfileUpdateSchema;
  path: {
    user_id: number;
  };
  query?: never;
  url: "/api/user/{user_id}/profile/";
};

export type UserEditProfileResponses = {
  /**
   * OK
   */
  200: UserProfileOutSchema;
};

export type UserEditProfileResponse = UserEditProfileResponses[keyof UserEditProfileResponses];

export type ClientOptions = {
  baseURL: string;
};
