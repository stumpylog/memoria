# https://taskfile.dev
version: "3"

# Variables that can be used across sub-Taskfiles (if passed down or read by them)
vars:
  PROJECT_NAME: memoria
  PYTHON_VERSION: 3.12
  DOCKER_IMAGE_NAME: "{{.PROJECT_NAME}}:{{.VERSION}}" # Dynamic image name

includes:
  backend: ./src-backend
  frontend: ./src-frontend
  docs: ./src-docs

tasks:
  default:
    cmds:
      - task --list-all
    silent: true
    desc: List all available tasks

  # -----------------------------------------------------------
  # Version Management
  # -----------------------------------------------------------
  version:sync:
    desc: Synchronizes the version to pyproject.toml and package.json files
    cmds:
      - python scripts/sync_version.py {{.CLI_ARGS}}
    sources:
      - VERSION
      - scripts/sync_version.py
      - src-backend/pyproject.toml
      - src-docs/pyproject.toml
      - src-frontend/package.json

  # -----------------------------------------------------------
  # Global Dependency Management
  # -----------------------------------------------------------
  deps:install:
    desc: Install all Python (uv workspace) and Node.js (pnpm) dependencies.
    cmds:
      - task: backend:deps:install
      - task: docs:deps:install
      - task: frontend:deps:install
      - echo "All dependencies installed."

  # -----------------------------------------------------------
  # Development Commands
  # -----------------------------------------------------------
  dev:
    desc: Starts all development servers (backend, frontend, docs).
    cmds:
      - echo "Starting dev servers..."
      - task: backend:dev &
      - task: frontend:dev &
      - task: docs:dev &
      - wait # Wait for all background tasks to complete (or use Ctrl+C to stop)

  # -----------------------------------------------------------
  # Build Commands
  # -----------------------------------------------------------
  build:
    desc: Builds all project artifacts (backend, frontend, docs).
    cmds:
      - task: version:sync # Ensure versions are synced before building
      - task: backend:build
      - task: frontend:build
      - task: docs:build
      - echo "All projects built."

  # -----------------------------------------------------------
  # Testing & Linting
  # -----------------------------------------------------------
  test:
    desc: Runs all tests across the backend.
    cmds:
      - task: backend:test

  lint:
    desc: Runs all linting checks across the backend and frontend.
    cmds:
      - task: backend:lint
      - task: frontend:lint

  # -----------------------------------------------------------
  # Cleanup
  # -----------------------------------------------------------
  clean:
    desc: Cleans build artifacts and caches from all projects.
    cmds:
      - task: backend:clean
      - task: frontend:clean
      - task: docs:clean
      - echo "All projects cleaned."

  # -----------------------------------------------------------
  # API Client Generation Workflow
  # -----------------------------------------------------------
  api:update-client:
    desc: Exports backend OpenAPI schema and generates frontend API client.
    cmds:
      - task: backend:api:export-schema
      - task: frontend:api:generate-client
    sources:
      - schema.json

  repomix:
    cmds:
      - repomix --style markdown --remove-comments --ignore frontend/.prettierignore,frontend/.stylelintignore,frontend/eslint.config.js,frontend/index.html,frontend/openapi-ts.config.ts,frontend/pnpm-workspace.yaml,frontend/README.md,frontend/vite.config.ts,frontend/tsconfig.app.json,frontend/tsconfig.json,frontend/tsconfig.node.json,frontend/public/,docker/,frontend/.env,frontend/.gitignore,memoria/migrations/,schema.json,docs/ --remove-empty-lines .
