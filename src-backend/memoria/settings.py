"""
Django settings for memoria project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from urllib.parse import urlparse

import redis

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

DATA_DIR = Path(os.environ.get("MEMORIA_DATA_DIR", BASE_DIR / "data"))
DATA_DIR.mkdir(parents=True, exist_ok=True)

STATIC_ROOT = BASE_DIR / "static"

LOGS_DIR = DATA_DIR / "logs"
LOGS_DIR.mkdir(parents=True, exist_ok=True)

MEDIA_ROOT = Path(os.environ.get("MEMORIA_MEDIA_DIR", BASE_DIR / "media"))

THUMBNAIL_DIR = MEDIA_ROOT / "thumbnails"
THUMBNAIL_DIR.mkdir(exist_ok=True, parents=True)

LARGE_SIZE_DIR = MEDIA_ROOT / "larger-size"
LARGE_SIZE_DIR.mkdir(exist_ok=True, parents=True)

SECRET_KEY = os.environ.get("MEMORIA_SECRET_KEY", "AuxBXBU1JzzFn1evKoVD818m4uRUqN0dJxCIDda0Op7L4NR7ftvZpF6uxp0xuoOU")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = "MEMORIA_DEBUG" in os.environ

#
# Hosting configuration
#
LOGIN_REDIRECT_URL = "/home/"
LOGOUT_REDIRECT_URL = "/logout/"
LOGIN_URL = "/login/"
MEDIA_URL = "/media/"

# CSRF settings
CSRF_COOKIE_HTTPONLY = False  # Maybe need to fix this later
CSRF_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SAMESITE = "Lax"  # or 'None' if using HTTPS with different domains

# Session settings
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SAMESITE = "Lax"  # or 'None' if using different domains

CSRF_TRUSTED_ORIGINS = (
    [os.getenv("MEMORIA_URL")]
    if "MEMORIA_URL" in os.environ
    else [
        "http://localhost:5173",  # Vite development server
    ]
)
CORS_ALLOWED_ORIGINS = (
    [os.getenv("MEMORIA_URL")]
    if "MEMORIA_URL" in os.environ
    else [
        "http://localhost:5173",  # Vite development server
    ]
)
ALLOWED_HOSTS = (
    [urlparse(os.getenv("MEMORIA_URL")).hostname, "localhost"] if "MEMORIA_URL" in os.environ else ["localhost"]
)
CORS_ALLOW_CREDENTIALS = True


# Application definition

INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "treenode",
    "timezone_field",
    "huey.contrib.djhuey",
    "memoria",
]

# Only used to generate schema
if DEBUG:
    INSTALLED_APPS.append("ninja")

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "memoria.urls"

WSGI_APPLICATION = "memoria.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASE_TYPE = os.environ.get("MEMORIA_DATABASE_TYPE", "sqlite")

if DATABASE_TYPE == "postgresql":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ.get("MEMORIA_DB_NAME", "memoria"),
            "USER": os.environ.get("MEMORIA_DB_USER", "memoria"),
            "PASSWORD": os.environ["MEMORIA_DB_PASSWORD"],
            "HOST": os.environ.get("MEMORIA_DB_HOST", "memoria-db"),
            "PORT": int(os.environ.get("MEMORIA_DB_PORT", "5432")),
            "pool": True,
        },
    }
else:  # SQLite for development
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": DATA_DIR / "db.sqlite3",
            "OPTIONS": {
                "init_command": (
                    "PRAGMA foreign_keys = ON;"
                    "PRAGMA journal_mode = WAL;"
                    "PRAGMA synchronous = NORMAL;"
                    "PRAGMA busy_timeout = 5000;"
                    "PRAGMA temp_store = MEMORY;"
                    "PRAGMA mmap_size = 134217728;"
                    "PRAGMA journal_size_limit = 67108864;"
                    "PRAGMA cache_size = 2000;"
                ),
                "transaction_mode": "IMMEDIATE",
            },
        },
    }

# Add a convenience flag to check database type in code
IS_POSTGRESQL = DATABASE_TYPE == "postgresql"
DB_SPECIFIC_MODULE = "memoria.db.postgresql" if IS_POSTGRESQL else "memoria.db.sqlite"

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",  # Django's default auth backend
)


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = os.environ.get("TZ", "UTC")

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

#
# Cache configuration
#
REDIS_URL = os.environ.get("MEMORIA_REDIS_URL")

if REDIS_URL:
    _cache_backend = "django.core.cache.backends.redis.RedisCache"
    _cache_location = REDIS_URL
else:
    _cache_backend = "django.core.cache.backends.dummy.DummyCache"
    _cache_location = None

CACHES = {
    "default": {
        "BACKEND": _cache_backend,
        "LOCATION": _cache_location,
    },
    "treenode": {
        "BACKEND": _cache_backend,
        "LOCATION": _cache_location,
    },
}

SESSION_ENGINE = "django.contrib.sessions.backends.cached_db" if REDIS_URL else "django.contrib.sessions.backends.db"


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            # Include more detail like time
            "format": "{asctime} {levelname} {name} : {message}",
            "style": "{",
        },
        "simple": {
            # A concise format
            "format": "{asctime} {levelname} {name} : {message}",
            "style": "{",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
            "level": "INFO",
        },
        "file_catchall": {
            "class": "concurrent_log_handler.ConcurrentRotatingFileHandler",
            "filename": LOGS_DIR / "catchall.log",
            "maxBytes": 1024 * 1024 * 5,
            "backupCount": 5,
            "formatter": "verbose",
            "level": "DEBUG",
        },
        "file_django": {
            "class": "concurrent_log_handler.ConcurrentRotatingFileHandler",
            "filename": LOGS_DIR / "django.log",
            "maxBytes": 1024 * 1024 * 5,
            "backupCount": 5,
            "formatter": "verbose",
            "level": "DEBUG",
        },
        "file_memoria": {
            "class": "concurrent_log_handler.ConcurrentRotatingFileHandler",
            "filename": LOGS_DIR / "memoria.log",
            "maxBytes": 1024 * 1024 * 5,
            "backupCount": 5,
            "formatter": "verbose",
            "level": "DEBUG",
        },
    },
    "loggers": {
        # Catch anything not defined specifically
        "": {
            "handlers": ["file_catchall"],
            "level": "DEBUG",
        },
        "memoria": {
            "handlers": ["console", "file_memoria"],
            "level": "DEBUG",
            "propagate": False,
        },
        "huey": {
            "handlers": ["console", "file_memoria"],
            "level": "DEBUG",
            "propagate": False,
        },
        # Logger specifically for Django's internal messages
        "django": {
            "handlers": ["console", "file_django"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

REDIS_CONNECTION_POOL = redis.ConnectionPool.from_url(
    REDIS_URL or "redis://localhost:6379/0",
    max_connections=10,
)

HUEY = {
    "huey_class": "huey.RedisHuey",  # Huey implementation to use.
    "name": "memoria",
    "results": True,  # Store return values of tasks.
    "store_none": False,  # If a task returns None, do not save to results.
    "immediate": DEBUG,  # If DEBUG=True, run synchronously.
    "utc": True,  # Use UTC for all times internally.
    "blocking": True,  # Perform blocking pop rather than poll Redis.
    "connection": {
        "connection_pool": REDIS_CONNECTION_POOL,
    },
    "consumer": {
        "workers": int(os.environ.get("MEMORIA_WORKER_COUNT", "2")),
        "worker_type": "process",
        "scheduler_interval": 60,
        "periodic": True,  # Enable crontab feature.
        "check_worker_health": True,  # Enable worker health checks.
        "health_check_interval": 60,  # Check worker health every second.
    },
}
