"""
Django settings for memoria project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from django_jinja.builtins import DEFAULT_EXTENSIONS

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_ROOT = BASE_DIR / "static"

LOGS_DIR = BASE_DIR / "logs"
LOGS_DIR.mkdir(parents=True, exist_ok=True)

MEDIA_ROOT = BASE_DIR / "media"

THUMBNAIL_DIR = MEDIA_ROOT / "thumbnails"
THUMBNAIL_DIR.mkdir(exist_ok=True, parents=True)

FULL_SIZE_DIR = MEDIA_ROOT / "fullsize"
FULL_SIZE_DIR.mkdir(exist_ok=True, parents=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure--^jm&ojgb%wu_#e#)p2r7c^h&-9q#avh^%7%m*4^8#*%c^s*dx"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_jinja",
    "django_jinja.contrib._humanize",
    "treenode",
    "timezone_field",
    "django_bootstrap5",
    "memoria",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "memoria.urls"

TEMPLATES = [
    {
        "BACKEND": "django_jinja.jinja2.Jinja2",
        "DIRS": [BASE_DIR / "memoria" / "templates"],
        "APP_DIRS": False,
        "OPTIONS": {
            "match_extension": ".jinja",
            "match_regex": r"^(?!admin/).*",
            "context_processors": [
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.debug",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "django.contrib.messages.context_processors.messages",
            ],
            "extensions": [*DEFAULT_EXTENSIONS, "django_bootstrap5.jinja2.BootstrapTags"],
        },
    },
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.debug",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.request",
            ],
        },
    },
]

WSGI_APPLICATION = "memoria.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASE_TYPE = os.environ.get("DATABASE_TYPE", "sqlite")

if DATABASE_TYPE == "postgresql":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ.get("DB_NAME", "your_db_name"),
            "USER": os.environ.get("DB_USER", "your_db_user"),
            "PASSWORD": os.environ.get("DB_PASSWORD", "your_db_password"),
            "HOST": os.environ.get("DB_HOST", "localhost"),
            "PORT": os.environ.get("DB_PORT", "5432"),
        },
    }
else:  # SQLite for development
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        },
    }

# Add a convenience flag to check database type in code
IS_POSTGRESQL = DATABASE_TYPE == "postgresql"
DB_SPECIFIC_MODULE = "memoria.db.postgresql" if IS_POSTGRESQL else "memoria.db.sqlite"

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",  # Django's default auth backend
)


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
    },
    "treenode": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
    },
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            # Include more detail like time
            "format": "{asctime} {levelname} {name} : {message}",
            "style": "{",
        },
        "simple": {
            # A concise format
            "format": "{asctime} {levelname} {name} : {message}",
            "style": "{",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
            "level": "INFO",
        },
        "file_catchall": {
            "class": "logging.handlers.RotatingFileHandler",
            # Use pathlib.Path object for the filename
            "filename": LOGS_DIR / "catchall.log",
            "maxBytes": 1024 * 1024 * 5,
            "backupCount": 5,
            "formatter": "verbose",
            "level": "DEBUG",
        },
        "file_django": {
            "class": "logging.handlers.RotatingFileHandler",
            # Use pathlib.Path object for the filename
            "filename": LOGS_DIR / "django.log",
            "maxBytes": 1024 * 1024 * 5,
            "backupCount": 5,
            "formatter": "verbose",
            "level": "DEBUG",
        },
        "file_memoria": {
            "class": "logging.handlers.RotatingFileHandler",
            # Use pathlib.Path object for the filename
            "filename": LOGS_DIR / "memoria.log",
            "maxBytes": 1024 * 1024 * 5,
            "backupCount": 5,
            "formatter": "verbose",
            "level": "DEBUG",
        },
    },
    "loggers": {
        # Catch anything not defined specifically
        "": {
            "handlers": ["file_catchall"],
            "level": "DEBUG",
        },
        "memoria": {
            "handlers": ["console", "file_memoria"],
            "level": "DEBUG",
            "propagate": False,
        },
        # Logger specifically for Django's internal messages
        "django": {
            "handlers": ["console", "file_django"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

LOGIN_REDIRECT_URL = "/home/"
LOGOUT_REDIRECT_URL = "/logout/"
LOGIN_URL = "/login/"
MEDIA_URL = "/media/"
