{% extends "base.html.jinja" %}
{% block extra_head %}
    <link rel="stylesheet" href="{{ static('choicesjs/css/choices.min.css') }}" />
{% endblock extra_head %}
{% block title %}
    Edit Image: {{ object.title|default('Untitled', true) }}
{% endblock title %}
{% block content %}
    <div class="container mt-4 mb-5">
        <h2 class="mb-3">Edit Image: {{ object.title|default('Untitled', true) }}</h2>
        <form method="post" novalidate>
            {% csrf_token %}
            {# Display non-field errors (form-level errors) #}
            {% if form.non_field_errors() %}
                <div class="alert alert-danger" role="alert">
                    {% for error in form.non_field_errors() %}<p class="mb-0">{{ error }}</p>{% endfor %}
                </div>
            {% endif %}
            {# General Information Section #}
            <fieldset class="border p-3 mb-4 rounded">
                <legend class="w-auto px-2 h5">Basic Information</legend>
                <div class="mb-3">
                    <label for="{{ form.title.id_for_label }}" class="form-label">{{ form.title.label }}</label>
                    <input type="text"
                           name="{{ form.title.html_name }}"
                           id="{{ form.title.id_for_label }}"
                           class="form-control {% if form.title.errors %}is-invalid{% endif %}"
                           value="{{ form.title.value() |default('', true) }}">
                    {% if form.title.help_text %}<div class="form-text">{{ form.title.help_text }}</div>{% endif %}
                    {% for error in form.title.errors %}<div class="invalid-feedback d-block">{{ error }}</div>{% endfor %}
                </div>
                <div class="mb-3">
                    <label for="{{ form.description.id_for_label }}" class="form-label">{{ form.description.label }}</label>
                    <textarea name="{{ form.description.html_name }}"
                              id="{{ form.description.id_for_label }}"
                              class="form-control {% if form.description.errors %}is-invalid{% endif %}"
                              rows="4">{{ form.description.value()|default('', true) }}</textarea>
                    {% if form.description.help_text %}
                        <div class="form-text">{{ form.description.help_text }}</div>
                    {% endif %}
                    {% for error in form.description.errors %}<div class="invalid-feedback d-block">{{ error }}</div>{% endfor %}
                </div>
            </fieldset>
            {# Date Section - Simplified to basic number inputs #}
            <fieldset class="border p-3 mb-4 rounded">
                <legend class="w-auto px-2 h5">Date Taken (Approximate)</legend>
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label for="{{ form.date_year.id_for_label }}" class="form-label">{{ form.date_year.label }}</label>
                        <input type="number"
                               name="{{ form.date_year.html_name }}"
                               id="{{ form.date_year.id_for_label }}"
                               class="form-control {% if form.date_year.errors %}is-invalid{% endif %}"
                               value="{{ form.date_year.value() |default('', true) }}"
                               placeholder="{{ form.date_year.field.widget.attrs.placeholder|default('YYYY') }}"
                               min="0">
                        {% if form.date_year.help_text %}<div class="form-text">{{ form.date_year.help_text }}</div>{% endif %}
                        {% for error in form.date_year.errors %}<div class="invalid-feedback d-block">{{ error }}</div>{% endfor %}
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="{{ form.date_month.id_for_label }}" class="form-label">{{ form.date_month.label }}</label>
                        <input type="number"
                               name="{{ form.date_month.html_name }}"
                               id="{{ form.date_month.id_for_label }}"
                               class="form-control {% if form.date_month.errors %}is-invalid{% endif %}"
                               value="{{ form.date_month.value() |default('', true) }}"
                               placeholder="{{ form.date_month.field.widget.attrs.placeholder|default('MM') }}"
                               min="1"
                               max="12">
                        {% if form.date_month.help_text %}<div class="form-text">{{ form.date_month.help_text }}</div>{% endif %}
                        {% for error in form.date_month.errors %}<div class="invalid-feedback d-block">{{ error }}</div>{% endfor %}
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="{{ form.date_day.id_for_label }}" class="form-label">{{ form.date_day.label }}</label>
                        <input type="number"
                               name="{{ form.date_day.html_name }}"
                               id="{{ form.date_day.id_for_label }}"
                               class="form-control {% if form.date_day.errors %}is-invalid{% endif %}"
                               value="{{ form.date_day.value() |default('', true) }}"
                               placeholder="{{ form.date_day.field.widget.attrs.placeholder|default('DD') }}"
                               min="1"
                               max="31">
                        {% if form.date_day.help_text %}<div class="form-text">{{ form.date_day.help_text }}</div>{% endif %}
                        {% for error in form.date_day.errors %}<div class="invalid-feedback d-block">{{ error }}</div>{% endfor %}
                    </div>
                </div>
            </fieldset>
            {# Location Section #}
            <fieldset class="border p-3 mb-4 rounded">
                <legend class="w-auto px-2 h5">Location</legend>
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="{{ form.location_country_input.id_for_label }}"
                               class="form-label">{{ form.location_country_input.label }}</label>
                        {# This input will be enhanced by Choices.js #}
                        <select name="{{ form.location_country_input.html_name }}"
                                id="{{ form.location_country_input.id_for_label }}"
                                class="form-control {% if form.location_country_input.errors %}is-invalid{% endif %}"
                                placeholder="{{ form.location_country_input.field.widget.attrs.placeholder|default('e.g., United States or US') }}">
                        </select>
                        {% if form.location_country_input.help_text %}
                            <div class="form-text">{{ form.location_country_input.help_text }}</div>
                        {% endif %}
                        {% for error in form.location_country_input.errors %}
                            <div class="invalid-feedback d-block">{{ error }}</div>
                        {% endfor %}
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="{{ form.location_subdivision_input.id_for_label }}"
                               class="form-label">{{ form.location_subdivision_input.label }}</label>
                        {# This input will be enhanced by Choices.js #}
                        <select name="{{ form.location_subdivision_input.html_name }}"
                                id="{{ form.location_subdivision_input.id_for_label }}"
                                class="form-control {% if form.location_subdivision_input.errors %}is-invalid{% endif %}"
                                placeholder="{{ form.location_subdivision_input.field.widget.attrs.placeholder|default('e.g., California or CA') }}">
                        </select>
                        {% if form.location_subdivision_input.help_text %}
                            <div class="form-text">{{ form.location_subdivision_input.help_text }}</div>
                        {% endif %}
                        {% for error in form.location_subdivision_input.errors %}
                            <div class="invalid-feedback d-block">{{ error }}</div>
                        {% endfor %}
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="{{ form.location_city.id_for_label }}" class="form-label">{{ form.location_city.label }}</label>
                        <input type="text"
                               name="{{ form.location_city.html_name }}"
                               id="{{ form.location_city.id_for_label }}"
                               class="form-control {% if form.location_city.errors %}is-invalid{% endif %}"
                               placeholder="{{ form.location_city.field.widget.attrs.placeholder|default('e.g., San Francisco') }}"
                               {% if form.location_city.value() %} value="{{ form.location_city.value() }}" {% else %} disabled {% endif %}>
                        {% if form.location_city.help_text %}<div class="form-text">{{ form.location_city.help_text }}</div>{% endif %}
                        {% for error in form.location_city.errors %}<div class="invalid-feedback d-block">{{ error }}</div>{% endfor %}
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="{{ form.location_sub_location.id_for_label }}"
                               class="form-label">{{ form.location_sub_location.label }}</label>
                        <input type="text"
                               name="{{ form.location_sub_location.html_name }}"
                               id="{{ form.location_sub_location.id_for_label }}"
                               class="form-control {% if form.location_sub_location.errors %}is-invalid{% endif %}"
                               placeholder="{{ form.location_sub_location.field.widget.attrs.placeholder|default('e.g., Golden Gate Bridge') }}"
                               {% if form.location_city.value() %} value="{{ form.location_sub_location.value() }}" {% else %} disabled {% endif %}>
                        {% if form.location_sub_location.help_text %}
                            <div class="form-text">{{ form.location_sub_location.help_text }}</div>
                        {% endif %}
                        {% for error in form.location_sub_location.errors %}
                            <div class="invalid-feedback d-block">{{ error }}</div>
                        {% endfor %}
                    </div>
                </div>
            </fieldset>
            <div class="mt-4">
                <button type="submit" class="btn btn-primary">Save Changes</button>
                <a href="{{ url('image_detail', pk=image.pk) }}"
                   class="btn btn-outline-secondary ms-2">Cancel</a>
            </div>
        </form>
    </div>
{% endblock content %}
{% block extra_js %}
    <script src="{{static('choicesjs\js\choices.min.js')}}"></script>
    <script>
document.addEventListener('DOMContentLoaded', async function() {
    // Date inputs
    const yearInput = document.getElementById('{{ form.date_year.id_for_label }}');
    const monthInput = document.getElementById('{{ form.date_month.id_for_label }}');
    const dayInput = document.getElementById('{{ form.date_day.id_for_label }}');

    // Location inputs
    const countryInputEl = document.getElementById('{{ form.location_country_input.id_for_label }}');
    const subdivisionInputEl = document.getElementById('{{ form.location_subdivision_input.id_for_label }}');
    const cityInputEl = document.getElementById('{{ form.location_city.id_for_label }}');
    const subLocationInputEl = document.getElementById('{{ form.location_sub_location.id_for_label }}');

    let countryChoices, subdivisionChoices, cityChoices, subLocationChoices;

    // Initialize Country Choices
    if (countryInputEl) {
        let finalCountryChoicesData = [];
        try {
            const rawCountryData = {{ available_countries_for_choicesjs|default([])|tojson|safe }};
            console.log('[Debug] Raw country data from template:', rawCountryData, typeof rawCountryData);
            if (Array.isArray(rawCountryData)) {
                finalCountryChoicesData = rawCountryData.filter(
                    item => typeof item === 'object' && item !== null && 'value' in item && 'label' in item
                );
                if (finalCountryChoicesData.length !== rawCountryData.length && rawCountryData.length > 0) {
                    console.warn('[Debug] Some country data items were filtered due to incorrect format.');
                }
            } else {
                console.warn('[Debug] Raw country data was not an array. Defaulting to empty.');
            }
        } catch (e) {
            console.error("[Debug] Error processing country data:", e);
        }
        console.log('[Debug] Data for Country Choices instance:', finalCountryChoicesData);

        countryChoices = new Choices(countryInputEl, {
            removeItemButton: true,
            placeholderValue: 'Select or type country',
            choices: finalCountryChoicesData,
            searchResultLimit: 10,
            searchEnabled: true,
            allowHTML: false,
            addItems: false,
            removeItems: false
        });
    } else {
        console.warn('[Debug] countryInputEl element not found.');
    }

    // Initialize Subdivision Choices
    if (subdivisionInputEl) {
        console.log('[Debug] Initializing empty Subdivision Choices.');
        subdivisionChoices = new Choices(subdivisionInputEl, {
            removeItemButton: true,
            placeholderValue: 'Select or type state/province',
            choices: [],
            searchResultLimit: 10,
            searchEnabled: true,
            allowHTML: false,
            addItems: false,
            removeItems: false,
            shouldSort: true,
        });
    } else {
        console.warn('[Debug] subdivisionInputEl element not found.');
    }

    // Initialize City Choices
    if (cityInputEl) {
        console.log('[Debug] Initializing empty City Choices.');
        cityChoices = new Choices(cityInputEl, {
            removeItemButton: true,
            placeholderValue: 'Select or type city',
            choices: [], // Always initialize with an empty array
            addItemText: (value, rawValue) => {
      return `Press Enter to city <b>"${value}"</b>`;
    },
            searchResultLimit: 10,
            searchEnabled: true,
            allowHTML: false,
            addItems: true,
            duplicateItemsAllowed: false,
            shouldSort: true,
            maxItemCount: 1,
        });
        cityChoices.disable();
    } else {
        console.warn('[Debug] cityInputEl element not found.');
    }

    // Initialize Sub-location Choices
    if (subLocationInputEl) {
        console.log('[Debug] Initializing empty Sub-location Choices.');
        subLocationChoices = new Choices(subLocationInputEl, {
            removeItemButton: true,
            placeholderValue: 'Select or type specific location',
            choices: [], // Always initialize with an empty array
            addItemText: (value, rawValue) => {
      return `Press Enter to add location <b>"${value}"</b>`;
    },
            searchResultLimit: 10,
            searchEnabled: true,
            allowHTML: false,
            addItems: true,
            duplicateItemsAllowed: false,
            shouldSort: true,
            maxItemCount: 1,
        });
        subLocationChoices.disable();
    } else {
        console.warn('[Debug] subLocationInputEl element not found.');
    }

    async function updateSubdivisionChoices(countryCode) {
        if (!subdivisionChoices) {
            console.warn("[Debug] Subdivision Choices instance not available for update.");
            return;
        }

        subdivisionChoices.clearStore();

        if (!countryCode) {
            subdivisionChoices.setChoices([{ value: '', label: 'Select a country first', disabled: true, placeholder: true }], 'value', 'label', true);
            subdivisionChoices.disable();
            return;
        }

        subdivisionChoices.enable();
        subdivisionChoices.setChoices([{ value: '', label: 'Loading subdivisions...', disabled: true, placeholder: true }], 'value', 'label', true);

        try {
            const response = await fetch(`{{ url('ajax_get_subdivisions') }}?country_code=${encodeURIComponent(countryCode)}`);
            if (!response.ok) throw new Error(`Network response was not ok: ${response.statusText}`);

            let newSubdivisionData = await response.json();
            console.log('[Debug] Data for Subdivision setChoices (from AJAX):', newSubdivisionData);

            if (!Array.isArray(newSubdivisionData)) {
                console.error('[Debug] newSubdivisionData from AJAX was not an array!');
                newSubdivisionData = [];
            }

            subdivisionChoices.clearStore(); // Clear loading message
            if (newSubdivisionData.length > 0) {
                subdivisionChoices.setChoices(newSubdivisionData, 'value', 'label', true);
            } else {
                subdivisionChoices.setChoices([{ value: '', label: 'No subdivisions available', disabled: true, placeholder: true }], 'value', 'label', true);
            }
        } catch (error) {
            console.error('Failed to load subdivisions:', error);
            subdivisionChoices.clearStore(); // Clear loading message
            subdivisionChoices.setChoices([{ value: '', label: 'Error loading subdivisions', disabled: true, placeholder: true }], 'value', 'label', true);
        }
    }

    async function updateCityChoices(countryCode, subdivisionCode) {
        if (!cityChoices) {
            console.warn("[Debug] City Choices instance not available for update.");
            return;
        }

        cityChoices.clearStore();

        if (!countryCode) {
            cityChoices.setValue([{ value: '', label: 'Select a country first', disabled: true, placeholder: true }], 'value', 'label', true);
            cityChoices.disable();
            return;
        }

        cityChoices.enable();
        cityChoices.setValue([{ value: '', label: 'Loading cities...', disabled: true, placeholder: true }], 'value', 'label', true);

        try {
            const url = new URL(`{{ url('ajax_get_cities') }}`, window.location.origin);
            url.searchParams.append('country_code', countryCode);
            if (subdivisionCode) {
                url.searchParams.append('subdivision_code', subdivisionCode);
            }

            const response = await fetch(url);
            if (!response.ok) throw new Error(`Network response was not ok: ${response.statusText}`);

            let cityData = await response.json();
            console.log('[Debug] Data for City setChoices (from AJAX):', cityData);

            if (!Array.isArray(cityData)) {
                console.error('[Debug] cityData from AJAX was not an array!');
                cityData = [];
            }

            cityChoices.clearStore(); // Clear loading message
            if (cityData.length > 0) {
                cityChoices.setValue(cityData, 'value', 'label', true);
            } else {
                cityChoices.setValue([{ value: '', label: 'Type to add a new city', disabled: false, placeholder: true }], 'value', 'label', true);
            }
        } catch (error) {
            console.error('Failed to load cities:', error);
            cityChoices.clearStore(); // Clear loading message
            cityChoices.setValue([{ value: '', label: 'Error loading cities', disabled: true, placeholder: true }], 'value', 'label', true);
        }
    }

    async function updateSubLocationChoices(countryCode, subdivisionCode, city) {
        if (!subLocationChoices) {
            console.warn("[Debug] Sub-location Choices instance not available for update.");
            return;
        }

        subLocationChoices.clearStore();

        if (!countryCode || !city) {
            subLocationChoices.setValue([{ value: '', label: 'Select country and city first', disabled: true, placeholder: true }], 'value', 'label', true);
            subLocationChoices.disable();
            return;
        }

        subLocationChoices.enable();
        subLocationChoices.setValue([{ value: '', label: 'Loading locations...', disabled: true, placeholder: true }], 'value', 'label', true);

        try {
            const url = new URL(`{{ url('ajax_get_sub_locations') }}`, window.location.origin);
            url.searchParams.append('country_code', countryCode);
            if (subdivisionCode) {
                url.searchParams.append('subdivision_code', subdivisionCode);
            }
            url.searchParams.append('city', city);

            const response = await fetch(url);
            if (!response.ok) throw new Error(`Network response was not ok: ${response.statusText}`);

            let subLocationData = await response.json();
            console.log('[Debug] Data for Sub-location setValue (from AJAX):', subLocationData);

            if (!Array.isArray(subLocationData)) {
                console.error('[Debug] subLocationData from AJAX was not an array!');
                subLocationData = [];
            }

            subLocationChoices.clearStore(); // Clear loading message
            if (subLocationData.length > 0) {
                subLocationChoices.setValue(subLocationData, 'value', 'label', true);
            } else {
                subLocationChoices.setValue([{ value: '', label: 'Type to add a new location', disabled: true, placeholder: true }], 'value', 'label', true);
            }
        } catch (error) {
            console.error('Failed to load sub-locations:', error);
            subLocationChoices.clearStore(); // Clear loading message
            subLocationChoices.setValue([{ value: '', label: 'Error loading locations', disabled: true, placeholder: true }], 'value', 'label', true);
        }
    }

    // Date validation functions
    function getDaysInMonth(year, month) { // month is 1-indexed (January is 1)
        if (!year || !month || isNaN(parseInt(year)) || isNaN(parseInt(month))) return 31; // Default
        return new Date(parseInt(year), parseInt(month), 0).getDate();
    }

    function updateDayMaxValue() {
        if (yearInput && monthInput && dayInput &&
            yearInput.value.trim() && monthInput.value.trim()) {
            const maxDays = getDaysInMonth(yearInput.value.trim(), monthInput.value.trim());
            dayInput.max = maxDays;

            // Validate current day value
            const dayVal = parseInt(dayInput.value);
            if (dayInput.value && (dayVal > maxDays || dayVal < 1)) {
                dayInput.classList.add('is-invalid');
            } else if (dayInput.value) {
                dayInput.classList.remove('is-invalid');
            }
        }
    }

    function updateLocationDependencies() {
        const countryVal = countryChoices ? countryChoices.getValue(true) : (countryInputEl ? countryInputEl.value.trim() : null);
        const subdivisionVal = subdivisionChoices ? subdivisionChoices.getValue(true) : (subdivisionInputEl ? subdivisionInputEl.value.trim() : null);

        // Update cities when country or subdivision changes
        if (countryVal) {
            updateCityChoices(countryVal, subdivisionVal);
        } else if (cityChoices) {
            cityChoices.disable();
            cityChoices.clearStore();
        }

        // Update sub-locations when city changes
        const cityVal = cityChoices ? cityChoices.getValue(true) : null;
        if (countryVal && cityVal) {
            updateSubLocationChoices(countryVal, subdivisionVal, cityVal);
        } else if (subLocationChoices) {
            subLocationChoices.disable();
            subLocationChoices.clearStore();
        }
    }

    // Attach event listeners for date fields
    if (yearInput) {
        yearInput.addEventListener('input', updateDayMaxValue);
    }

    if (monthInput) {
        monthInput.addEventListener('input', updateDayMaxValue);
    }

    if (dayInput) {
        dayInput.addEventListener('input', updateDayMaxValue);
    }

    // Attach event listeners for location fields
    if (countryChoices) {
        countryInputEl.addEventListener('change', function() {
            const selectedCountryCode = countryChoices.getValue(true);
            console.log('[Debug] Country changed to:', selectedCountryCode);
            updateSubdivisionChoices(selectedCountryCode);
            updateLocationDependencies();
        });
    }

    if (subdivisionChoices && subdivisionInputEl) {
        subdivisionInputEl.addEventListener('change', function() {
            console.log('[Debug] Subdivision changed');
            updateLocationDependencies();
        });
    }

    if (cityChoices && cityInputEl) {
        cityInputEl.addEventListener('change', function() {
            const selectedCity = cityChoices.getValue(true);
            console.log('[Debug] City changed to:', selectedCity);

            // Get current country and subdivision values
            const countryVal = countryChoices ? countryChoices.getValue(true) : null;
            const subdivisionVal = subdivisionChoices ? subdivisionChoices.getValue(true) : null;

            // Update sub-locations based on new city value
            if (countryVal && selectedCity) {
                updateSubLocationChoices(countryVal, subdivisionVal, selectedCity);
            }
        });
    }

    // Initial state setup on page load
    updateDayMaxValue();

    // Initialize subdivisions if country is pre-selected
    {% if form.location_country_input.value() %}
        const initialCountryValue = "{{ form.location_country_input.value() }}";
        countryChoices.setChoiceByValue(initialCountryValue);
    {% else %}
        const initialCountryValue = "{{ form.location_country_input.value() }}";
    {% endif %}
    console.log('[Debug] Initial country value for subdivision load:', initialCountryValue);
    if (initialCountryValue) {
        // Must await so the choices are updated
        await updateSubdivisionChoices(initialCountryValue);

        {% if form.location_subdivision_input.value() %}
            const initialSubdivisionValue = "{{ form.location_subdivision_input.value() }}"
            subdivisionChoices.setChoiceByValue("{{ form.location_subdivision_input.value() }}");
            subdivisionChoices.enable();
        {% else %}
            const initialSubdivisionValue = null;
        {% endif %}

        await updateCityChoices(initialCountryValue, initialSubdivisionValue);

        {% if form.location_city.value() %}
            const initialCityValue = "{{ form.location_city.value() }}"
            cityChoices.clearStore();
            cityChoices.setValue(["{{ form.location_city.value() }}"]);
            cityChoices.enable();
            console.log(initialCityValue);
        {% else %}
            const initialCityValue = null;
        {% endif %}

        // Initialize sub-locations if city is pre-selected
        if (initialCityValue) {
            await updateSubLocationChoices(initialCountryValue, initialSubdivisionValue, initialCityValue);
            {% if form.location_sub_location.value() %}
            subLocationChoices.clearStore();
            subLocationChoices.setValue(["{{ form.location_sub_location.value() }}"])
            {% endif %}
        }
    } else {
        if (subdivisionChoices) updateSubdivisionChoices(null);
        if (cityChoices) cityChoices.disable();
        if (subLocationChoices) subLocationChoices.disable();
    }
});
    </script>
{% endblock extra_js %}
