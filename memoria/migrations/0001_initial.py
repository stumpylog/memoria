# Generated by Django 5.2 on 2025-05-05 21:49

import django.core.validators
import django.db.models.deletion
import timezone_field.fields
from django.conf import settings
from django.db import migrations
from django.db import models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Album",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(db_index=True, max_length=100, unique=True)),
                ("description", models.TextField(blank=True, db_index=True, null=True)),
                (
                    "edit_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups allowed to edit this object",
                        related_name="%(class)ss_editable",
                        to="auth.group",
                    ),
                ),
                (
                    "view_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups allowed to view this object",
                        related_name="%(class)ss_viewable",
                        to="auth.group",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ImageFolder",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "tn_ancestors_pks",
                    models.TextField(blank=True, default="", editable=False, verbose_name="Ancestors pks"),
                ),
                (
                    "tn_ancestors_count",
                    models.PositiveIntegerField(default=0, editable=False, verbose_name="Ancestors count"),
                ),
                (
                    "tn_children_pks",
                    models.TextField(blank=True, default="", editable=False, verbose_name="Children pks"),
                ),
                (
                    "tn_children_count",
                    models.PositiveIntegerField(default=0, editable=False, verbose_name="Children count"),
                ),
                (
                    "tn_depth",
                    models.PositiveIntegerField(
                        default=0,
                        editable=False,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Depth",
                    ),
                ),
                (
                    "tn_descendants_pks",
                    models.TextField(blank=True, default="", editable=False, verbose_name="Descendants pks"),
                ),
                (
                    "tn_descendants_count",
                    models.PositiveIntegerField(default=0, editable=False, verbose_name="Descendants count"),
                ),
                ("tn_index", models.PositiveIntegerField(default=0, editable=False, verbose_name="Index")),
                (
                    "tn_level",
                    models.PositiveIntegerField(
                        default=1,
                        editable=False,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Level",
                    ),
                ),
                (
                    "tn_priority",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(9999999999),
                        ],
                        verbose_name="Priority",
                    ),
                ),
                ("tn_order", models.PositiveIntegerField(default=0, editable=False, verbose_name="Order")),
                (
                    "tn_siblings_pks",
                    models.TextField(blank=True, default="", editable=False, verbose_name="Siblings pks"),
                ),
                (
                    "tn_siblings_count",
                    models.PositiveIntegerField(default=0, editable=False, verbose_name="Siblings count"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(db_index=True, max_length=100, unique=True)),
                ("description", models.TextField(blank=True, db_index=True, null=True)),
                (
                    "edit_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups allowed to edit this object",
                        related_name="%(class)ss_editable",
                        to="auth.group",
                    ),
                ),
                (
                    "tn_parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tn_children",
                        to="memoria.imagefolder",
                        verbose_name="Parent",
                    ),
                ),
                (
                    "view_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups allowed to view this object",
                        related_name="%(class)ss_viewable",
                        to="auth.group",
                    ),
                ),
            ],
            options={
                "verbose_name": "Folder",
                "verbose_name_plural": "Folders",
            },
        ),
        migrations.CreateModel(
            name="Image",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "original_checksum",
                    models.CharField(
                        db_index=True,
                        help_text="The BLAKE3 checksum of the original file",
                        max_length=64,
                        unique=True,
                        verbose_name="blake3 hex digest",
                    ),
                ),
                (
                    "thumbnail_checksum",
                    models.CharField(
                        db_index=True,
                        help_text="The BLAKE3 checksum of the image thumbnail",
                        max_length=64,
                        unique=True,
                        verbose_name="blake3 hex digest",
                    ),
                ),
                (
                    "full_size_checksum",
                    models.CharField(
                        db_index=True,
                        help_text="The BLAKE3 checksum of the full size image",
                        max_length=64,
                        unique=True,
                        verbose_name="blake3 hex digest",
                    ),
                ),
                (
                    "phash",
                    models.CharField(
                        db_index=True,
                        help_text="The pHash (average) of the original file",
                        max_length=32,
                        verbose_name="perceptual average hash of the image",
                    ),
                ),
                (
                    "file_size",
                    models.PositiveBigIntegerField(
                        help_text="Size of the original file in bytes",
                        verbose_name="file size in bytes",
                    ),
                ),
                ("height", models.PositiveIntegerField(verbose_name="height in pixels")),
                ("width", models.PositiveIntegerField(verbose_name="width in pixels")),
                (
                    "orientation",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Horizontal"),
                            (2, "Mirror Horizontal"),
                            (3, "Rotate 180"),
                            (4, "Mirror Vertical"),
                            (5, "Mirror Horizontal And Rotate 270 Cw"),
                            (6, "Rotate 90 Cw"),
                            (7, "Mirror Horizontal And Rotate 90 Cw"),
                            (8, "Rotate 270 Cw"),
                        ],
                        default=1,
                        help_text="MWG Orientation flag",
                    ),
                ),
                ("description", models.TextField(blank=True, help_text="MWG Description tag", null=True)),
                ("original", models.CharField(max_length=1024, unique=True, verbose_name="Path to the original image")),
                (
                    "original_name",
                    models.CharField(max_length=256, verbose_name="The stemmed filename of the original file"),
                ),
                (
                    "is_dirty",
                    models.BooleanField(
                        default=False,
                        help_text="The metadata is dirty and needs to be synced to the file",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        default=None,
                        help_text="Date the image was deleted or None if it has not been",
                        null=True,
                    ),
                ),
                ("is_starred", models.BooleanField(default=False, help_text="The image has been starred")),
                (
                    "edit_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups allowed to edit this object",
                        related_name="%(class)ss_editable",
                        to="auth.group",
                    ),
                ),
                (
                    "view_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups allowed to view this object",
                        related_name="%(class)ss_viewable",
                        to="auth.group",
                    ),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        help_text="The folder this image belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="memoria.imagefolder",
                    ),
                ),
            ],
            options={
                "ordering": ["pk"],
            },
        ),
        migrations.CreateModel(
            name="ImageInAlbum",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("sort_order", models.PositiveBigIntegerField(verbose_name="Order of this image in the album")),
                (
                    "album",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="memoria.album"),
                ),
                ("image", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="memoria.image")),
            ],
            options={
                "ordering": ["sort_order"],
            },
        ),
        migrations.AddField(
            model_name="album",
            name="images",
            field=models.ManyToManyField(related_name="albums", through="memoria.ImageInAlbum", to="memoria.image"),
        ),
        migrations.CreateModel(
            name="ImageSource",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(db_index=True, max_length=100, unique=True)),
                ("description", models.TextField(blank=True, db_index=True, null=True)),
                (
                    "edit_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups allowed to edit this object",
                        related_name="%(class)ss_editable",
                        to="auth.group",
                    ),
                ),
                (
                    "view_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups allowed to view this object",
                        related_name="%(class)ss_viewable",
                        to="auth.group",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="image",
            name="source",
            field=models.ForeignKey(
                blank=True,
                help_text="Source of the original image (box, deck, carousel, etc)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="images",
                to="memoria.imagesource",
            ),
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(db_index=True, max_length=100, unique=True)),
                ("description", models.TextField(blank=True, db_index=True, null=True)),
                (
                    "edit_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups allowed to edit this object",
                        related_name="%(class)ss_editable",
                        to="auth.group",
                    ),
                ),
                (
                    "view_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups allowed to view this object",
                        related_name="%(class)ss_viewable",
                        to="auth.group",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PersonInImage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "center_x",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "center_y",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "height",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "width",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        max_length=2048,
                        null=True,
                        verbose_name="Optional description of the region",
                    ),
                ),
                (
                    "exclude_from_training",
                    models.BooleanField(
                        default=False,
                        help_text="For future growth, do not use this box for facial recognition training",
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        help_text="A Thing is in this Image at the given location",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="memoria.image",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        help_text="Person is in this Image at the given location",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="memoria.person",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="image",
            name="people",
            field=models.ManyToManyField(
                help_text="These people are in the image",
                through="memoria.PersonInImage",
                to="memoria.person",
            ),
        ),
        migrations.CreateModel(
            name="Pet",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(db_index=True, max_length=100, unique=True)),
                ("description", models.TextField(blank=True, db_index=True, null=True)),
                (
                    "pet_type",
                    models.CharField(
                        blank=True,
                        choices=[("cat", "Cat"), ("dog", "Dog"), ("horse", "Horse")],
                        help_text="The type of pet this is",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "edit_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups allowed to edit this object",
                        related_name="%(class)ss_editable",
                        to="auth.group",
                    ),
                ),
                (
                    "view_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups allowed to view this object",
                        related_name="%(class)ss_viewable",
                        to="auth.group",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PetInImage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "center_x",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "center_y",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "height",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "width",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        max_length=2048,
                        null=True,
                        verbose_name="Optional description of the region",
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        help_text="A Thing is in this Image at the given location",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="memoria.image",
                    ),
                ),
                (
                    "pet",
                    models.ForeignKey(
                        help_text="Pet is in this Image at the given location",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="memoria.pet",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="image",
            name="pets",
            field=models.ManyToManyField(
                help_text="These pets are in the image",
                through="memoria.PetInImage",
                to="memoria.pet",
            ),
        ),
        migrations.CreateModel(
            name="RoughDate",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("date", models.DateField(help_text="The date of the image, maybe not exact", unique=True)),
                ("month_valid", models.BooleanField(default=False, help_text="Is the month of this date valid?")),
                ("day_valid", models.BooleanField(default=False, help_text="Is the day of this date valid?")),
                (
                    "edit_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups allowed to edit this object",
                        related_name="%(class)ss_editable",
                        to="auth.group",
                    ),
                ),
                (
                    "view_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups allowed to view this object",
                        related_name="%(class)ss_viewable",
                        to="auth.group",
                    ),
                ),
            ],
            options={
                "ordering": ["date"],
            },
        ),
        migrations.AddField(
            model_name="image",
            name="date",
            field=models.ForeignKey(
                blank=True,
                help_text="RoughDate when the image was taken, with as much refinement as possible",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="images",
                to="memoria.roughdate",
            ),
        ),
        migrations.CreateModel(
            name="RoughLocation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "country_code",
                    models.CharField(
                        db_index=True,
                        help_text="Country code in ISO 3166-1 alpha 2 format",
                        max_length=4,
                    ),
                ),
                (
                    "subdivision_code",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="State, province or subdivision ISO 3166-2 alpha 2 format",
                        max_length=12,
                        null=True,
                    ),
                ),
                (
                    "city",
                    models.CharField(blank=True, db_index=True, help_text="City or town", max_length=255, null=True),
                ),
                (
                    "sub_location",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Detailed location within a city or Town",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "edit_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups allowed to edit this object",
                        related_name="%(class)ss_editable",
                        to="auth.group",
                    ),
                ),
                (
                    "view_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups allowed to view this object",
                        related_name="%(class)ss_viewable",
                        to="auth.group",
                    ),
                ),
            ],
            options={
                "ordering": ["country_code", "subdivision_code", "city", "sub_location"],
            },
        ),
        migrations.AddField(
            model_name="image",
            name="location",
            field=models.ForeignKey(
                blank=True,
                help_text="Location where the image was taken, with as much refinement as possible",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="images",
                to="memoria.roughlocation",
            ),
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "tn_ancestors_pks",
                    models.TextField(blank=True, default="", editable=False, verbose_name="Ancestors pks"),
                ),
                (
                    "tn_ancestors_count",
                    models.PositiveIntegerField(default=0, editable=False, verbose_name="Ancestors count"),
                ),
                (
                    "tn_children_pks",
                    models.TextField(blank=True, default="", editable=False, verbose_name="Children pks"),
                ),
                (
                    "tn_children_count",
                    models.PositiveIntegerField(default=0, editable=False, verbose_name="Children count"),
                ),
                (
                    "tn_depth",
                    models.PositiveIntegerField(
                        default=0,
                        editable=False,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Depth",
                    ),
                ),
                (
                    "tn_descendants_pks",
                    models.TextField(blank=True, default="", editable=False, verbose_name="Descendants pks"),
                ),
                (
                    "tn_descendants_count",
                    models.PositiveIntegerField(default=0, editable=False, verbose_name="Descendants count"),
                ),
                ("tn_index", models.PositiveIntegerField(default=0, editable=False, verbose_name="Index")),
                (
                    "tn_level",
                    models.PositiveIntegerField(
                        default=1,
                        editable=False,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Level",
                    ),
                ),
                (
                    "tn_priority",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(9999999999),
                        ],
                        verbose_name="Priority",
                    ),
                ),
                ("tn_order", models.PositiveIntegerField(default=0, editable=False, verbose_name="Order")),
                (
                    "tn_siblings_pks",
                    models.TextField(blank=True, default="", editable=False, verbose_name="Siblings pks"),
                ),
                (
                    "tn_siblings_count",
                    models.PositiveIntegerField(default=0, editable=False, verbose_name="Siblings count"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(db_index=True, max_length=100, unique=True)),
                ("description", models.TextField(blank=True, db_index=True, null=True)),
                (
                    "tn_parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tn_children",
                        to="memoria.tag",
                        verbose_name="Parent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tag",
                "verbose_name_plural": "Tags",
                "ordering": ["tn_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TagOnImage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("applied", models.BooleanField(default=False, help_text="This tag is applied to this image")),
                (
                    "image",
                    models.ForeignKey(
                        help_text="A Tag is on this Image",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="memoria.image",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        help_text="Tag is on this Image",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="memoria.tag",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="image",
            name="tags",
            field=models.ManyToManyField(
                help_text="These tags apply to the image",
                through="memoria.TagOnImage",
                to="memoria.tag",
            ),
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("bio", models.TextField(blank=True)),
                (
                    "items_per_page",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (10, "10"),
                            (20, "20"),
                            (30, "30"),
                            (40, "40"),
                            (50, "50"),
                            (60, "60"),
                            (70, "70"),
                            (80, "80"),
                            (90, "90"),
                            (100, "100"),
                        ],
                        default=30,
                    ),
                ),
                ("timezone", timezone_field.fields.TimeZoneField(default="America/Los_Angeles")),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddConstraint(
            model_name="imageinalbum",
            constraint=models.UniqueConstraint(fields=("sort_order", "album"), name="sorting-to-album"),
        ),
        migrations.AddConstraint(
            model_name="roughdate",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("day_valid", False),
                    models.Q(("month_valid", False), _negated=True),
                    _connector="OR",
                ),
                name="invalid-month-day-combo",
            ),
        ),
        migrations.AddConstraint(
            model_name="roughdate",
            constraint=models.UniqueConstraint(fields=("date", "month_valid", "day_valid"), name="unique-date"),
        ),
        migrations.AddConstraint(
            model_name="roughlocation",
            constraint=models.UniqueConstraint(
                fields=("country_code", "subdivision_code", "city", "sub_location"),
                name="unique-location",
            ),
        ),
    ]
