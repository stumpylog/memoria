// This file is auto-generated by @hey-api/openapi-ts

/**
 * AlbumAddImageInSchema
 */
export type AlbumAddImageInSchema = {
  /**
   * Image Ids
   * The id of the image to add to the album
   */
  image_ids?: Array<number>;
};

/**
 * AlbumBasicReadOutSchema
 */
export type AlbumBasicReadOutSchema = {
  /**
   * Created At
   * Timestamp when the object was created
   */
  created_at: string;
  /**
   * Description
   * The description of the album
   */
  description?: string | null;
  /**
   * Edit Groups
   * Groups allowed to edit this object
   */
  edit_groups?: Array<GroupSchemaOut>;
  /**
   * Id
   * The unique identifier of the object
   */
  id: number;
  /**
   * Image Count
   * The count of images in this album
   */
  image_count: number;
  /**
   * Name
   * The name of the album
   */
  name: string;
  /**
   * Updated At
   * Timestamp when the object was last updated
   */
  updated_at: string;
  /**
   * View Groups
   * Groups allowed to view this object
   */
  view_groups?: Array<GroupSchemaOut>;
};

/**
 * AlbumCreateInSchema
 */
export type AlbumCreateInSchema = {
  /**
   * Description
   * The description of the album
   */
  description?: string | null;
  /**
   * Edit Group Ids
   * IDs of Groups allowed to edit
   */
  edit_group_ids?: Array<number>;
  /**
   * Name
   * The name of the album
   */
  name: string;
  /**
   * View Group Ids
   * IDs of Groups allowed to view
   */
  view_group_ids?: Array<number>;
};

/**
 * AlbumRemoveImageInSchema
 */
export type AlbumRemoveImageInSchema = {
  /**
   * Image Ids
   * The id of the image to remove from the album
   */
  image_ids?: Array<number>;
};

/**
 * AlbumSortUpdateInSchema
 */
export type AlbumSortUpdateInSchema = {
  /**
   * Sorting
   * The new order of the images, with the index being the new position in the album
   */
  sorting: Array<number>;
};

/**
 * AlbumUpdateInSchema
 */
export type AlbumUpdateInSchema = {
  /**
   * Description
   * The new description of the album
   */
  description?: string | null;
  /**
   * Edit Group Ids
   * New list of Group IDs allowed to edit
   */
  edit_group_ids?: Array<number> | null;
  /**
   * Name
   * The new name of the album
   */
  name?: string | null;
  /**
   * View Group Ids
   * New list of Group IDs allowed to view
   */
  view_group_ids?: Array<number> | null;
};

/**
 * AlbumWithImagesOutSchema
 */
export type AlbumWithImagesOutSchema = {
  /**
   * Created At
   * Timestamp when the object was created
   */
  created_at: string;
  /**
   * Description
   * The description of the album
   */
  description?: string | null;
  /**
   * Edit Groups
   * Groups allowed to edit this object
   */
  edit_groups?: Array<GroupSchemaOut>;
  /**
   * Id
   * The unique identifier of the object
   */
  id: number;
  /**
   * Image Count
   * The count of images in this album
   */
  image_count: number;
  /**
   * Image Ids
   * The ids of the images in this album in sorted order
   */
  image_ids: Array<number>;
  /**
   * Name
   * The name of the album
   */
  name: string;
  /**
   * Updated At
   * Timestamp when the object was last updated
   */
  updated_at: string;
  /**
   * View Groups
   * Groups allowed to view this object
   */
  view_groups?: Array<GroupSchemaOut>;
};

/**
 * AuthLoginSchema
 */
export type AuthLoginSchemaReadable = {
  /**
   * Username
   * The user's login name.
   */
  username: string;
};

/**
 * AuthLoginSchema
 */
export type AuthLoginSchemaWritable = {
  /**
   * Password
   * The user's password (treated as a secret).
   */
  password: string;
  /**
   * Username
   * The user's login name.
   */
  username: string;
};

/**
 * BreadcrumbSchema
 */
export type BreadcrumbSchema = {
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name: string;
};

/**
 * CountryListItemSchemaOut
 */
export type CountryListItemSchemaOut = {
  /**
   * Alpha2
   */
  alpha2: string;
  /**
   * Best Name
   */
  best_name: string;
};

/**
 * CsrfTokenOutSchema
 */
export type CsrfTokenOutSchema = {
  /**
   * Csrf Token
   * The CSRF token used for session verification.
   */
  csrf_token: string;
};

/**
 * FolderDetailSchemaOut
 */
export type FolderDetailSchemaOut = {
  /**
   * Breadcrumbs
   */
  breadcrumbs: Array<BreadcrumbSchema>;
  /**
   * Child Folders
   */
  child_folders: Array<RootFolderSchemaOut>;
  /**
   * Created At
   * Timestamp when the object was created
   */
  created_at: string;
  /**
   * Description
   */
  description: string | null;
  /**
   * Edit Groups
   * Groups allowed to edit this object
   */
  edit_groups?: Array<GroupSchemaOut>;
  /**
   * Folder Images
   */
  folder_images: Array<number>;
  /**
   * Has Children
   */
  has_children: boolean;
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name: string;
  /**
   * Updated At
   * Timestamp when the object was last updated
   */
  updated_at: string;
  /**
   * View Groups
   * Groups allowed to view this object
   */
  view_groups?: Array<GroupSchemaOut>;
};

/**
 * FolderUpdateSchemaIn
 */
export type FolderUpdateSchemaIn = {
  /**
   * Description
   */
  description?: string | null;
  /**
   * Edit Group Ids
   * New list of Group IDs allowed to edit
   */
  edit_group_ids?: Array<number> | null;
  /**
   * Name
   */
  name?: string | null;
  /**
   * View Group Ids
   * New list of Group IDs allowed to view
   */
  view_group_ids?: Array<number> | null;
};

/**
 * GroupCreateInSchema
 */
export type GroupCreateInSchema = {
  /**
   * Name
   */
  name: string;
};

/**
 * GroupOutSchema
 */
export type GroupOutSchema = {
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name: string;
};

/**
 * GroupSchemaOut
 */
export type GroupSchemaOut = {
  /**
   * Id
   * The unique identifier of the object
   */
  id: number;
  /**
   * Name
   * The name of the group
   */
  name: string;
};

/**
 * GroupUpdateInSchema
 */
export type GroupUpdateInSchema = {
  /**
   * Name
   */
  name: string;
};

/**
 * ImageBooleanFilterSchema
 */
export type ImageBooleanFilterSchema = {
  /**
   * Is Deleted
   * Filter by deletion status
   */
  is_deleted?: boolean | null;
  /**
   * Is Dirty
   * Filter by dirty status
   */
  is_dirty?: boolean | null;
  /**
   * Is Starred
   * Filter by starred status
   */
  is_starred?: boolean | null;
};

/**
 * ImageDateFilterSchema
 */
export type ImageDateFilterSchema = {
  /**
   * Date End
   * Filter images up to this date using comparison_date
   */
  date_end?: string | null;
  /**
   * Date Start
   * Filter images from this date onwards using comparison_date
   */
  date_start?: string | null;
  /**
   * Day End
   * Filter images up to this day (1-31, includes null days)
   */
  day_end?: number | null;
  /**
   * Day Start
   * Filter images from this day onwards (1-31, includes null days)
   */
  day_start?: number | null;
  /**
   * Month End
   * Filter images up to this month (1-12, includes null months)
   */
  month_end?: number | null;
  /**
   * Month Start
   * Filter images from this month onwards (1-12, includes null months)
   */
  month_start?: number | null;
  /**
   * Year End
   * Filter images up to this year
   */
  year_end?: number | null;
  /**
   * Year Start
   * Filter images from this year onwards
   */
  year_start?: number | null;
};

/**
 * ImageDateSchemaOut
 */
export type ImageDateSchemaOut = {
  /**
   * Comparison Date
   */
  comparison_date: string;
  /**
   * Day
   */
  day?: number | null;
  /**
   * Day Valid
   */
  day_valid?: boolean;
  /**
   * Month
   */
  month?: number | null;
  /**
   * Month Valid
   */
  month_valid?: boolean;
  /**
   * Year
   */
  year: number;
};

/**
 * ImageDateUpdateSchemaIn
 */
export type ImageDateUpdateSchemaIn = {
  /**
   * Date
   */
  date: string;
  /**
   * Day Valid
   */
  day_valid: boolean;
  /**
   * Month Valid
   */
  month_valid: boolean;
};

/**
 * ImageExactDateFilterSchema
 * Exact matching for specific year/month/day combinations
 */
export type ImageExactDateFilterSchema = {
  /**
   * Day
   * Filter images from this exact day (1-31)
   */
  day?: number | null;
  /**
   * Month
   * Filter images from this exact month (1-12)
   */
  month?: number | null;
  /**
   * Year
   * Filter images from this exact year
   */
  year?: number | null;
};

/**
 * ImageFKFilterSchema
 */
export type ImageFkFilterSchema = {
  /**
   * Folder Id
   * Filter by ImageFolder ID
   */
  folder_id?: number | null;
};

/**
 * ImageFolderSchemaOut
 */
export type ImageFolderSchemaOut = {
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name: string;
};

/**
 * ImageLocationFilterSchema
 */
export type ImageLocationFilterSchema = {
  /**
   * City
   * Filter by city name (partial match)
   */
  city?: string | null;
  /**
   * Country Code
   * Filter by country code (ISO 3166-1 alpha 2)
   */
  country_code?: string | null;
  /**
   * Sub Location
   * Filter by sub-location (partial match)
   */
  sub_location?: string | null;
  /**
   * Subdivision Code
   * Filter by state/province code (ISO 3166-2)
   */
  subdivision_code?: string | null;
};

/**
 * ImageLocationSchemaOut
 */
export type ImageLocationSchemaOut = {
  /**
   * City
   */
  city: string | null;
  /**
   * Country Code
   */
  country_code: string;
  /**
   * Country Name
   */
  country_name: string;
  /**
   * Sub Location
   */
  sub_location: string | null;
  /**
   * Subdivision Code
   */
  subdivision_code: string | null;
  /**
   * Subdivision Name
   */
  subdivision_name: string | null;
};

/**
 * ImageLocationUpdateSchemaIn
 */
export type ImageLocationUpdateSchemaIn = {
  /**
   * City
   */
  city: string | null;
  /**
   * Country Code
   */
  country_code: string;
  /**
   * Sub Location
   */
  sub_location: string | null;
  /**
   * Subdivision Code
   */
  subdivision_code: string | null;
};

/**
 * ImageM2MFilterSchema
 */
export type ImageM2mFilterSchema = {
  /**
   * Exclude People Ids
   * Exclude images with these Person IDs
   */
  exclude_people_ids?: Array<number> | null;
  /**
   * Exclude Pets Ids
   * Exclude images with these Pet IDs
   */
  exclude_pets_ids?: Array<number> | null;
  /**
   * Exclude Tags Ids
   * Exclude images with these Tag IDs
   */
  exclude_tags_ids?: Array<number> | null;
  /**
   * People Ids
   * Filter by Person IDs
   */
  people_ids?: Array<number> | null;
  /**
   * Pets Ids
   * Filter by Pet IDs
   */
  pets_ids?: Array<number> | null;
  /**
   * Require All
   * Require ALL specified IDs to be present (AND logic)
   */
  require_all?: boolean;
  /**
   * Tags Ids
   * Filter by Tag IDs
   */
  tags_ids?: Array<number> | null;
};

/**
 * ImageMetadataSchemaOut
 */
export type ImageMetadataSchemaOut = {
  /**
   * Can Edit
   */
  can_edit: boolean;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Description
   */
  description: string | null;
  /**
   * Edit Groups
   * Groups allowed to edit this object
   */
  edit_groups?: Array<GroupSchemaOut>;
  /**
   * File Size
   */
  file_size: number;
  folder: ImageFolderSchemaOut;
  /**
   * Id
   * The unique identifier of the object
   */
  id: number;
  /**
   * Image Fs Id
   */
  image_fs_id: string;
  /**
   * Larger Size Url
   */
  larger_size_url: string;
  orientation: RotationEnum;
  /**
   * Original Checksum
   */
  original_checksum: string;
  /**
   * Original Path
   */
  original_path: string;
  /**
   * Phash
   */
  phash: string;
  size: ImageSizeSchemaOut;
  /**
   * Title
   */
  title: string;
  /**
   * Updated At
   */
  updated_at: string;
  /**
   * View Groups
   * Groups allowed to view this object
   */
  view_groups?: Array<GroupSchemaOut>;
};

/**
 * ImageMetadataUpdateSchemaIn
 */
export type ImageMetadataUpdateSchemaIn = {
  /**
   * Description
   */
  description: string | null;
  /**
   * Edit Group Ids
   * New list of Group IDs allowed to edit
   */
  edit_group_ids?: Array<number> | null;
  /**
   * Title
   */
  title: string | null;
  /**
   * View Group Ids
   * New list of Group IDs allowed to view
   */
  view_group_ids?: Array<number> | null;
};

/**
 * ImageScaledSideMaxEnum
 * IntEnum for the maximum side length of a scaled image,
 * commonly used for responsive image breakpoints.
 *
 * Sync with ImageScaledSideMaxChoices
 */
export type ImageScaledSideMaxEnum = 768 | 1024 | 1920 | 2560 | 3840;

/**
 * ImageSizeSchemaOut
 */
export type ImageSizeSchemaOut = {
  /**
   * Large Version Height
   */
  large_version_height: number;
  /**
   * Large Version Width
   */
  large_version_width: number;
  /**
   * Original Height
   */
  original_height: number;
  /**
   * Original Width
   */
  original_width: number;
};

/**
 * ImageThumbnailSchemaOut
 */
export type ImageThumbnailSchemaOut = {
  /**
   * Id
   * The unique identifier of the object
   */
  id: number;
  /**
   * Thumbnail Height
   */
  thumbnail_height: number;
  /**
   * Thumbnail Url
   */
  thumbnail_url: string;
  /**
   * Thumbnail Width
   */
  thumbnail_width: number;
  /**
   * Title
   */
  title: string;
};

/**
 * ImagesPerPageChoices
 */
export type ImagesPerPageChoices = 10 | 20 | 30 | 40 | 50 | 60 | 70 | 80 | 90 | 100;

/**
 * Input
 */
export type Input = {
  /**
   * Limit
   */
  limit?: number;
  /**
   * Offset
   */
  offset?: number;
};

/**
 * PagedAlbumBasicReadOutSchema
 */
export type PagedAlbumBasicReadOutSchema = {
  /**
   * Count
   */
  count: number;
  /**
   * Items
   */
  items: Array<AlbumBasicReadOutSchema>;
};

/**
 * PagedImageThumbnailSchemaOut
 */
export type PagedImageThumbnailSchemaOut = {
  /**
   * Count
   */
  count: number;
  /**
   * Items
   */
  items: Array<ImageThumbnailSchemaOut>;
};

/**
 * PagedPersonImageOutSchema
 */
export type PagedPersonImageOutSchema = {
  /**
   * Count
   */
  count: number;
  /**
   * Items
   */
  items: Array<PersonImageOutSchema>;
};

/**
 * PagedPersonReadOutSchema
 */
export type PagedPersonReadOutSchema = {
  /**
   * Count
   */
  count: number;
  /**
   * Items
   */
  items: Array<PersonReadOutSchema>;
};

/**
 * PagedPetImageOutSchema
 */
export type PagedPetImageOutSchema = {
  /**
   * Count
   */
  count: number;
  /**
   * Items
   */
  items: Array<PetImageOutSchema>;
};

/**
 * PagedPetReadSchemaOut
 */
export type PagedPetReadSchemaOut = {
  /**
   * Count
   */
  count: number;
  /**
   * Items
   */
  items: Array<PetReadSchemaOut>;
};

/**
 * PersonDetailOutSchema
 */
export type PersonDetailOutSchema = {
  /**
   * Created At
   * Timestamp when the object was created
   */
  created_at: string;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Edit Groups
   * Groups allowed to edit this object
   */
  edit_groups?: Array<GroupSchemaOut>;
  /**
   * Id
   */
  id: number;
  /**
   * Image Count
   */
  image_count: number;
  /**
   * Name
   */
  name: string;
  /**
   * Updated At
   * Timestamp when the object was last updated
   */
  updated_at: string;
  /**
   * View Groups
   * Groups allowed to view this object
   */
  view_groups?: Array<GroupSchemaOut>;
};

/**
 * PersonImageOutSchema
 */
export type PersonImageOutSchema = {
  /**
   * Id
   * One image the person appears in
   */
  id: number;
};

/**
 * PersonInImageSchemaOut
 * Schema for representing a PersonInImage instance.
 * Details a specific person's bounding box in an image.
 */
export type PersonInImageSchemaOut = {
  /**
   * Center X
   */
  center_x: number;
  /**
   * Center Y
   */
  center_y: number;
  /**
   * Height
   */
  height: number;
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name: string;
  /**
   * Person Id
   */
  person_id: number;
  /**
   * Width
   */
  width: number;
};

/**
 * PersonReadOutSchema
 * Schema when reading a person
 */
export type PersonReadOutSchema = {
  /**
   * Description
   */
  description?: string | null;
  /**
   * Id
   */
  id: number;
  /**
   * Image Count
   */
  image_count: number;
  /**
   * Name
   */
  name: string;
};

/**
 * PersonUpdateInSchema
 * Schema to update a person
 */
export type PersonUpdateInSchema = {
  /**
   * Description
   */
  description?: string | null;
  /**
   * Edit Group Ids
   * New list of Group IDs allowed to edit
   */
  edit_group_ids?: Array<number> | null;
  /**
   * Name
   */
  name?: string | null;
  /**
   * View Group Ids
   * New list of Group IDs allowed to view
   */
  view_group_ids?: Array<number> | null;
};

/**
 * PetImageOutSchema
 */
export type PetImageOutSchema = {
  /**
   * Id
   * One image the pet appears in
   */
  id: number;
};

/**
 * PetInImageSchemaOut
 * Schema for representing a PetInImage instance.
 * Details a specific pet's bounding box in an image.
 */
export type PetInImageSchemaOut = {
  /**
   * Center X
   */
  center_x: number;
  /**
   * Center Y
   */
  center_y: number;
  /**
   * Height
   */
  height: number;
  /**
   * Id
   */
  id: number;
  /**
   * Name
   */
  name: string;
  /**
   * Pet Id
   */
  pet_id?: number | null;
  /**
   * Width
   */
  width: number;
};

/**
 * PetReadDetailSchemaOut
 * Schema when reading a pet
 */
export type PetReadDetailSchemaOut = {
  /**
   * Created At
   * Timestamp when the object was created
   */
  created_at: string;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Edit Groups
   * Groups allowed to edit this object
   */
  edit_groups?: Array<GroupSchemaOut>;
  /**
   * Id
   */
  id: number;
  /**
   * Image Count
   */
  image_count: number;
  /**
   * Name
   */
  name: string;
  pet_type?: PetTypeChoices | null;
  /**
   * Updated At
   * Timestamp when the object was last updated
   */
  updated_at: string;
  /**
   * View Groups
   * Groups allowed to view this object
   */
  view_groups?: Array<GroupSchemaOut>;
};

/**
 * PetReadSchemaOut
 * Schema when reading a pet
 */
export type PetReadSchemaOut = {
  /**
   * Description
   */
  description?: string | null;
  /**
   * Id
   */
  id: number;
  /**
   * Image Count
   */
  image_count: number;
  /**
   * Name
   */
  name: string;
  pet_type?: PetTypeChoices | null;
};

/**
 * PetTypeChoices
 */
export type PetTypeChoices = "cat" | "dog" | "horse";

/**
 * PetUpdateInSchema
 * Schema to update a pet
 */
export type PetUpdateInSchema = {
  /**
   * Description
   */
  description?: string | null;
  /**
   * Edit Group Ids
   * New list of Group IDs allowed to edit
   */
  edit_group_ids?: Array<number> | null;
  /**
   * Name
   */
  name?: string | null;
  pet_type?: PetTypeChoices | null;
  /**
   * View Group Ids
   * New list of Group IDs allowed to view
   */
  view_group_ids?: Array<number> | null;
};

/**
 * RootFolderSchemaOut
 */
export type RootFolderSchemaOut = {
  /**
   * Child Count
   */
  child_count?: number;
  /**
   * Description
   */
  description: string | null;
  /**
   * Edit Groups
   * Groups allowed to edit this object
   */
  edit_groups?: Array<GroupSchemaOut>;
  /**
   * Id
   */
  id: number;
  /**
   * Image Count
   */
  image_count?: number;
  /**
   * Name
   */
  name: string;
  /**
   * View Groups
   * Groups allowed to view this object
   */
  view_groups?: Array<GroupSchemaOut>;
};

/**
 * RotationEnum
 * https://exiftool.org/TagNames/EXIF.html (0x0112)
 */
export type RotationEnum = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;

/**
 * SiteSettingsSchemaOut
 * Schema for outputting site-wide image and quality settings.
 * Used for retrieving the current configuration.
 */
export type SiteSettingsSchemaOut = {
  /**
   * The largest side dimension of generated large images
   */
  large_image_max_size: ImageScaledSideMaxEnum;
  /**
   * Large Image Quality
   * The WebP quality setting for generate large images
   */
  large_image_quality: number;
  /**
   * The largest side dimension of generated image thumbnails
   */
  thumbnail_max_size: ThumbnailSizeEnum;
};

/**
 * SiteSettingsUpdateSchemaIn
 * Schema for updating site settings. All fields are optional to allow
 * partial updates (PATCH requests), using Python 3.10+ `| None` syntax.
 */
export type SiteSettingsUpdateSchemaIn = {
  /**
   * The largest side dimension of generated large images
   */
  large_image_max_size?: ImageScaledSideMaxEnum | null;
  /**
   * Large Image Quality
   * The WebP quality setting for generate large images
   */
  large_image_quality?: number | null;
  /**
   * The largest side dimension of generated image thumbnails
   */
  thumbnail_max_size?: ThumbnailSizeEnum | null;
};

/**
 * StatisticsResponseSchema
 * Combined schema for system and user-specific statistics.
 */
export type StatisticsResponseSchema = {
  /**
   * Overall system-level statistics, such as disk usage.
   */
  system_statistics: SystemStatisticsSchema;
  /**
   * Statistics related to the current user's view and edit permissions.
   */
  user_statistics: UserStatisticsSchema;
};

/**
 * SubdivisionListItemSchemaOut
 */
export type SubdivisionListItemSchemaOut = {
  /**
   * Code
   */
  code: string;
  /**
   * Name
   */
  name: string;
};

/**
 * SystemStatisticsSchema
 * Schema for overall system statistics.
 * This now only includes non-sensitive system-level information like disk space.
 */
export type SystemStatisticsSchema = {
  /**
   * Disk Free Space Gb
   * Disk space currently free in GB where media files are stored.
   */
  disk_free_space_gb?: number | null;
  /**
   * Disk Total Space Gb
   * Total disk space available in GB where media files are stored.
   */
  disk_total_space_gb?: number | null;
  /**
   * Disk Used Space Gb
   * Disk space currently used in GB where media files are stored.
   */
  disk_used_space_gb?: number | null;
};

/**
 * ThumbnailSizeEnum
 * Defines standard pixel dimensions for image thumbnails using an IntEnum.
 * The value represents the maximum dimension (width or height)
 * of the thumbnail, with aspect ratio preserved.
 *
 * Sync with ThumbnailSizeChoices
 */
export type ThumbnailSizeEnum = 128 | 256 | 512 | 640 | 800;

/**
 * TimezoneChoices
 */
export type TimezoneChoices =
  | "Africa/Abidjan"
  | "Africa/Accra"
  | "Africa/Addis_Ababa"
  | "Africa/Algiers"
  | "Africa/Asmara"
  | "Africa/Asmera"
  | "Africa/Bamako"
  | "Africa/Bangui"
  | "Africa/Banjul"
  | "Africa/Bissau"
  | "Africa/Blantyre"
  | "Africa/Brazzaville"
  | "Africa/Bujumbura"
  | "Africa/Cairo"
  | "Africa/Casablanca"
  | "Africa/Ceuta"
  | "Africa/Conakry"
  | "Africa/Dakar"
  | "Africa/Dar_es_Salaam"
  | "Africa/Djibouti"
  | "Africa/Douala"
  | "Africa/El_Aaiun"
  | "Africa/Freetown"
  | "Africa/Gaborone"
  | "Africa/Harare"
  | "Africa/Johannesburg"
  | "Africa/Juba"
  | "Africa/Kampala"
  | "Africa/Khartoum"
  | "Africa/Kigali"
  | "Africa/Kinshasa"
  | "Africa/Lagos"
  | "Africa/Libreville"
  | "Africa/Lome"
  | "Africa/Luanda"
  | "Africa/Lubumbashi"
  | "Africa/Lusaka"
  | "Africa/Malabo"
  | "Africa/Maputo"
  | "Africa/Maseru"
  | "Africa/Mbabane"
  | "Africa/Mogadishu"
  | "Africa/Monrovia"
  | "Africa/Nairobi"
  | "Africa/Ndjamena"
  | "Africa/Niamey"
  | "Africa/Nouakchott"
  | "Africa/Ouagadougou"
  | "Africa/Porto-Novo"
  | "Africa/Sao_Tome"
  | "Africa/Timbuktu"
  | "Africa/Tripoli"
  | "Africa/Tunis"
  | "Africa/Windhoek"
  | "America/Adak"
  | "America/Anchorage"
  | "America/Anguilla"
  | "America/Antigua"
  | "America/Araguaina"
  | "America/Argentina/Buenos_Aires"
  | "America/Argentina/Catamarca"
  | "America/Argentina/ComodRivadavia"
  | "America/Argentina/Cordoba"
  | "America/Argentina/Jujuy"
  | "America/Argentina/La_Rioja"
  | "America/Argentina/Mendoza"
  | "America/Argentina/Rio_Gallegos"
  | "America/Argentina/Salta"
  | "America/Argentina/San_Juan"
  | "America/Argentina/San_Luis"
  | "America/Argentina/Tucuman"
  | "America/Argentina/Ushuaia"
  | "America/Aruba"
  | "America/Asuncion"
  | "America/Atikokan"
  | "America/Atka"
  | "America/Bahia"
  | "America/Bahia_Banderas"
  | "America/Barbados"
  | "America/Belem"
  | "America/Belize"
  | "America/Blanc-Sablon"
  | "America/Boa_Vista"
  | "America/Bogota"
  | "America/Boise"
  | "America/Buenos_Aires"
  | "America/Cambridge_Bay"
  | "America/Campo_Grande"
  | "America/Cancun"
  | "America/Caracas"
  | "America/Catamarca"
  | "America/Cayenne"
  | "America/Cayman"
  | "America/Chicago"
  | "America/Chihuahua"
  | "America/Ciudad_Juarez"
  | "America/Coral_Harbour"
  | "America/Cordoba"
  | "America/Costa_Rica"
  | "America/Coyhaique"
  | "America/Creston"
  | "America/Cuiaba"
  | "America/Curacao"
  | "America/Danmarkshavn"
  | "America/Dawson"
  | "America/Dawson_Creek"
  | "America/Denver"
  | "America/Detroit"
  | "America/Dominica"
  | "America/Edmonton"
  | "America/Eirunepe"
  | "America/El_Salvador"
  | "America/Ensenada"
  | "America/Fort_Nelson"
  | "America/Fort_Wayne"
  | "America/Fortaleza"
  | "America/Glace_Bay"
  | "America/Godthab"
  | "America/Goose_Bay"
  | "America/Grand_Turk"
  | "America/Grenada"
  | "America/Guadeloupe"
  | "America/Guatemala"
  | "America/Guayaquil"
  | "America/Guyana"
  | "America/Halifax"
  | "America/Havana"
  | "America/Hermosillo"
  | "America/Indiana/Indianapolis"
  | "America/Indiana/Knox"
  | "America/Indiana/Marengo"
  | "America/Indiana/Petersburg"
  | "America/Indiana/Tell_City"
  | "America/Indiana/Vevay"
  | "America/Indiana/Vincennes"
  | "America/Indiana/Winamac"
  | "America/Indianapolis"
  | "America/Inuvik"
  | "America/Iqaluit"
  | "America/Jamaica"
  | "America/Jujuy"
  | "America/Juneau"
  | "America/Kentucky/Louisville"
  | "America/Kentucky/Monticello"
  | "America/Knox_IN"
  | "America/Kralendijk"
  | "America/La_Paz"
  | "America/Lima"
  | "America/Los_Angeles"
  | "America/Louisville"
  | "America/Lower_Princes"
  | "America/Maceio"
  | "America/Managua"
  | "America/Manaus"
  | "America/Marigot"
  | "America/Martinique"
  | "America/Matamoros"
  | "America/Mazatlan"
  | "America/Mendoza"
  | "America/Menominee"
  | "America/Merida"
  | "America/Metlakatla"
  | "America/Mexico_City"
  | "America/Miquelon"
  | "America/Moncton"
  | "America/Monterrey"
  | "America/Montevideo"
  | "America/Montreal"
  | "America/Montserrat"
  | "America/Nassau"
  | "America/New_York"
  | "America/Nipigon"
  | "America/Nome"
  | "America/Noronha"
  | "America/North_Dakota/Beulah"
  | "America/North_Dakota/Center"
  | "America/North_Dakota/New_Salem"
  | "America/Nuuk"
  | "America/Ojinaga"
  | "America/Panama"
  | "America/Pangnirtung"
  | "America/Paramaribo"
  | "America/Phoenix"
  | "America/Port-au-Prince"
  | "America/Port_of_Spain"
  | "America/Porto_Acre"
  | "America/Porto_Velho"
  | "America/Puerto_Rico"
  | "America/Punta_Arenas"
  | "America/Rainy_River"
  | "America/Rankin_Inlet"
  | "America/Recife"
  | "America/Regina"
  | "America/Resolute"
  | "America/Rio_Branco"
  | "America/Rosario"
  | "America/Santa_Isabel"
  | "America/Santarem"
  | "America/Santiago"
  | "America/Santo_Domingo"
  | "America/Sao_Paulo"
  | "America/Scoresbysund"
  | "America/Shiprock"
  | "America/Sitka"
  | "America/St_Barthelemy"
  | "America/St_Johns"
  | "America/St_Kitts"
  | "America/St_Lucia"
  | "America/St_Thomas"
  | "America/St_Vincent"
  | "America/Swift_Current"
  | "America/Tegucigalpa"
  | "America/Thule"
  | "America/Thunder_Bay"
  | "America/Tijuana"
  | "America/Toronto"
  | "America/Tortola"
  | "America/Vancouver"
  | "America/Virgin"
  | "America/Whitehorse"
  | "America/Winnipeg"
  | "America/Yakutat"
  | "America/Yellowknife"
  | "Antarctica/Casey"
  | "Antarctica/Davis"
  | "Antarctica/DumontDUrville"
  | "Antarctica/Macquarie"
  | "Antarctica/Mawson"
  | "Antarctica/McMurdo"
  | "Antarctica/Palmer"
  | "Antarctica/Rothera"
  | "Antarctica/South_Pole"
  | "Antarctica/Syowa"
  | "Antarctica/Troll"
  | "Antarctica/Vostok"
  | "Arctic/Longyearbyen";

/**
 * UserFilterSchema
 */
export type UserFilterSchema = {
  /**
   * Email
   * Filter by email (contains)
   */
  email?: string | null;
  /**
   * Is Active
   * Filter by active status
   */
  is_active?: boolean | null;
  /**
   * Is Staff
   * Filter by staff status
   */
  is_staff?: boolean | null;
  /**
   * Is Superuser
   * Filter by superuser status
   */
  is_superuser?: boolean | null;
  /**
   * Search
   * Search in username, email, first_name, last_name
   */
  search?: string | null;
  /**
   * Username
   * Filter by exact username
   */
  username?: string | null;
};

/**
 * UserGroupAssignInSchema
 */
export type UserGroupAssignInSchema = {
  /**
   * Id
   */
  id: number;
};

/**
 * UserInCreateSchema
 */
export type UserInCreateSchemaReadable = {
  /**
   * Email
   */
  email?: string | null;
  /**
   * First Name
   */
  first_name?: string | null;
  /**
   * Is Active
   */
  is_active?: boolean;
  /**
   * Is Staff
   */
  is_staff?: boolean;
  /**
   * Is Superuser
   */
  is_superuser?: boolean;
  /**
   * Last Name
   */
  last_name?: string | null;
  /**
   * Username
   */
  username: string;
};

/**
 * UserInCreateSchema
 */
export type UserInCreateSchemaWritable = {
  /**
   * Email
   */
  email?: string | null;
  /**
   * First Name
   */
  first_name?: string | null;
  /**
   * Is Active
   */
  is_active?: boolean;
  /**
   * Is Staff
   */
  is_staff?: boolean;
  /**
   * Is Superuser
   */
  is_superuser?: boolean;
  /**
   * Last Name
   */
  last_name?: string | null;
  /**
   * Password
   */
  password: string;
  /**
   * Username
   */
  username: string;
};

/**
 * UserOutSchema
 */
export type UserOutSchema = {
  /**
   * Date Joined
   */
  date_joined: string;
  /**
   * Email
   */
  email?: string | null;
  /**
   * First Name
   */
  first_name: string;
  /**
   * Id
   */
  id: number;
  /**
   * Is Active
   */
  is_active?: boolean;
  /**
   * Is Staff
   */
  is_staff?: boolean;
  /**
   * Is Superuser
   */
  is_superuser?: boolean;
  /**
   * Last Login
   */
  last_login: string | null;
  /**
   * Last Name
   */
  last_name: string;
  /**
   * Username
   */
  username: string;
};

/**
 * UserProfileOutSchema
 */
export type UserProfileOutSchema = {
  /**
   * Bio
   */
  bio: string | null;
  items_per_page: ImagesPerPageChoices;
  timezone_name: TimezoneChoices;
};

/**
 * UserProfileUpdateSchema
 */
export type UserProfileUpdateSchema = {
  /**
   * Bio
   */
  bio?: string | null;
  items_per_page?: ImagesPerPageChoices | null;
  timezone_name?: TimezoneChoices | null;
};

/**
 * UserStatisticsSchema
 * Schema for user-specific statistics.
 */
export type UserStatisticsSchema = {
  /**
   * Total Albums Editable
   * Total number of albums the current user can edit.
   */
  total_albums_editable: number;
  /**
   * Total Albums Viewable
   * Total number of albums the current user can view.
   */
  total_albums_viewable: number;
  /**
   * Total Folders Editable
   * Total number of image folders the current user can edit.
   */
  total_folders_editable: number;
  /**
   * Total Folders Viewable
   * Total number of image folders the current user can view.
   */
  total_folders_viewable: number;
  /**
   * Total Images Editable
   * Total number of images the current user can edit.
   */
  total_images_editable: number;
  /**
   * Total Images Viewable
   * Total number of images the current user can view.
   */
  total_images_viewable: number;
  /**
   * Total People Editable
   * Total number of people the current user can edit.
   */
  total_people_editable: number;
  /**
   * Total People Viewable
   * Total number of people the current user can view.
   */
  total_people_viewable: number;
  /**
   * Total Pets Editable
   * Total number of pets the current user can edit.
   */
  total_pets_editable: number;
  /**
   * Total Pets Viewable
   * Total number of pets the current user can view.
   */
  total_pets_viewable: number;
  /**
   * Total Rough Dates
   * Total number of rough dates the current user can view.
   */
  total_rough_dates: number;
  /**
   * Total Rough Locations
   * Total number of rough locations the current user can view.
   */
  total_rough_locations: number;
  /**
   * Total Sources Editable
   * Total number of image sources the current user can edit.
   */
  total_sources_editable: number;
  /**
   * Total Sources Viewable
   * Total number of image sources the current user can view.
   */
  total_sources_viewable: number;
  /**
   * Total Tags
   * Total number of tags in the system
   */
  total_tags: number;
};

/**
 * UserUpdateInScheme
 */
export type UserUpdateInSchemeReadable = {
  /**
   * Email
   */
  email?: string | null;
  /**
   * First Name
   */
  first_name?: string | null;
  /**
   * Is Active
   */
  is_active?: boolean | null;
  /**
   * Is Staff
   */
  is_staff?: boolean | null;
  /**
   * Is Superuser
   */
  is_superuser?: boolean | null;
  /**
   * Last Name
   */
  last_name?: string | null;
  /**
   * Password
   */
  password?: string | null;
};

/**
 * UserUpdateInScheme
 */
export type UserUpdateInSchemeWritable = {
  /**
   * Email
   */
  email?: string | null;
  /**
   * First Name
   */
  first_name?: string | null;
  /**
   * Is Active
   */
  is_active?: boolean | null;
  /**
   * Is Staff
   */
  is_staff?: boolean | null;
  /**
   * Is Superuser
   */
  is_superuser?: boolean | null;
  /**
   * Last Name
   */
  last_name?: string | null;
  /**
   * Password
   */
  password?: string | null;
};

export type GetAllAlbumsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Album Name
     */
    album_name?: string | null;
    /**
     * Limit
     */
    limit?: number;
    /**
     * Offset
     */
    offset?: number;
  };
  url: "/api/album/";
};

export type GetAllAlbumsResponses = {
  /**
   * OK
   */
  200: PagedAlbumBasicReadOutSchema;
};

export type GetAllAlbumsResponse = GetAllAlbumsResponses[keyof GetAllAlbumsResponses];

export type CreateAlbumData = {
  body: AlbumCreateInSchema;
  path?: never;
  query?: never;
  url: "/api/album/";
};

export type CreateAlbumResponses = {
  /**
   * Created
   */
  201: AlbumBasicReadOutSchema;
};

export type CreateAlbumResponse = CreateAlbumResponses[keyof CreateAlbumResponses];

export type DeleteAlbumData = {
  body?: never;
  path: {
    /**
     * Album Id
     */
    album_id: number;
  };
  query?: never;
  url: "/api/album/{album_id}/";
};

export type DeleteAlbumResponses = {
  /**
   * No Content
   */
  204: void;
};

export type DeleteAlbumResponse = DeleteAlbumResponses[keyof DeleteAlbumResponses];

export type GetSingleAlbumInfoData = {
  body?: never;
  path: {
    /**
     * Album Id
     */
    album_id: number;
  };
  query?: never;
  url: "/api/album/{album_id}/";
};

export type GetSingleAlbumInfoErrors = {
  /**
   * Album not found or inaccessible
   */
  404: unknown;
};

export type GetSingleAlbumInfoResponses = {
  /**
   * OK
   */
  200: AlbumWithImagesOutSchema;
};

export type GetSingleAlbumInfoResponse =
  GetSingleAlbumInfoResponses[keyof GetSingleAlbumInfoResponses];

export type UpdateAlbumInfoData = {
  body: AlbumUpdateInSchema;
  path: {
    /**
     * Album Id
     */
    album_id: number;
  };
  query?: never;
  url: "/api/album/{album_id}/";
};

export type UpdateAlbumInfoErrors = {
  /**
   * Album not found or inaccessible
   */
  404: unknown;
};

export type UpdateAlbumInfoResponses = {
  /**
   * OK
   */
  200: AlbumBasicReadOutSchema;
};

export type UpdateAlbumInfoResponse = UpdateAlbumInfoResponses[keyof UpdateAlbumInfoResponses];

export type AddImageToAlbumData = {
  body: AlbumAddImageInSchema;
  path: {
    /**
     * Album Id
     */
    album_id: number;
  };
  query?: never;
  url: "/api/album/{album_id}/add/";
};

export type AddImageToAlbumResponses = {
  /**
   * OK
   */
  200: AlbumWithImagesOutSchema;
};

export type AddImageToAlbumResponse = AddImageToAlbumResponses[keyof AddImageToAlbumResponses];

export type DownloadAlbumData = {
  body?: never;
  path: {
    /**
     * Album Id
     */
    album_id: number;
  };
  query?: {
    /**
     * Zip Originals
     */
    zip_originals?: boolean;
  };
  url: "/api/album/{album_id}/download/";
};

export type DownloadAlbumResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type DeleteImageFromAlbumData = {
  body: AlbumRemoveImageInSchema;
  path: {
    /**
     * Album Id
     */
    album_id: number;
  };
  query?: never;
  url: "/api/album/{album_id}/remove/";
};

export type DeleteImageFromAlbumResponses = {
  /**
   * OK
   */
  200: AlbumWithImagesOutSchema;
};

export type DeleteImageFromAlbumResponse =
  DeleteImageFromAlbumResponses[keyof DeleteImageFromAlbumResponses];

export type UpdateAlbumSortingData = {
  body: AlbumSortUpdateInSchema;
  path: {
    /**
     * Album Id
     */
    album_id: number;
  };
  query?: never;
  url: "/api/album/{album_id}/sort/";
};

export type UpdateAlbumSortingErrors = {
  /**
   * Sorting list mismatch with album contents
   */
  400: unknown;
  /**
   * Album not found or inaccessible
   */
  404: unknown;
};

export type UpdateAlbumSortingResponses = {
  /**
   * OK
   */
  200: AlbumWithImagesOutSchema;
};

export type UpdateAlbumSortingResponse =
  UpdateAlbumSortingResponses[keyof UpdateAlbumSortingResponses];

export type AuthGetCsrfTokenData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/auth/csrf/";
};

export type AuthGetCsrfTokenResponses = {
  /**
   * OK
   */
  200: CsrfTokenOutSchema;
};

export type AuthGetCsrfTokenResponse = AuthGetCsrfTokenResponses[keyof AuthGetCsrfTokenResponses];

export type AuthLoginData = {
  body: AuthLoginSchemaWritable;
  path?: never;
  query?: never;
  url: "/api/auth/login/";
};

export type AuthLoginErrors = {
  /**
   * username or password not provided
   */
  400: unknown;
  /**
   * invalid username or password provided
   */
  401: unknown;
};

export type AuthLoginResponses = {
  /**
   * No Content
   */
  204: void;
};

export type AuthLoginResponse = AuthLoginResponses[keyof AuthLoginResponses];

export type AuthLogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/auth/logout/";
};

export type AuthLogoutResponses = {
  /**
   * No Content
   */
  204: void;
};

export type AuthLogoutResponse = AuthLogoutResponses[keyof AuthLogoutResponses];

export type FolderListRootsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/folder/";
};

export type FolderListRootsResponses = {
  /**
   * Response
   * OK
   */
  200: Array<RootFolderSchemaOut>;
};

export type FolderListRootsResponse = FolderListRootsResponses[keyof FolderListRootsResponses];

export type ListAllFoldersData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/folder/all/";
};

export type ListAllFoldersResponses = {
  /**
   * Response
   * OK
   */
  200: Array<RootFolderSchemaOut>;
};

export type ListAllFoldersResponse = ListAllFoldersResponses[keyof ListAllFoldersResponses];

export type FolderGetDetailsData = {
  body?: never;
  path: {
    /**
     * Folder Id
     */
    folder_id: number;
  };
  query?: never;
  url: "/api/folder/{folder_id}/";
};

export type FolderGetDetailsResponses = {
  /**
   * OK
   */
  200: FolderDetailSchemaOut;
};

export type FolderGetDetailsResponse = FolderGetDetailsResponses[keyof FolderGetDetailsResponses];

export type UpdateFolderInfoData = {
  body: FolderUpdateSchemaIn;
  path: {
    /**
     * Folder Id
     */
    folder_id: number;
  };
  query?: never;
  url: "/api/folder/{folder_id}/";
};

export type UpdateFolderInfoResponses = {
  /**
   * OK
   */
  200: FolderDetailSchemaOut;
};

export type UpdateFolderInfoResponse = UpdateFolderInfoResponses[keyof UpdateFolderInfoResponses];

export type ListGroupsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/groups/";
};

export type ListGroupsResponses = {
  /**
   * Response
   * OK
   */
  200: Array<GroupOutSchema>;
};

export type ListGroupsResponse = ListGroupsResponses[keyof ListGroupsResponses];

export type CreateGroupsData = {
  /**
   * Data
   */
  body: GroupCreateInSchema | Array<GroupCreateInSchema>;
  path?: never;
  query?: never;
  url: "/api/groups/";
};

export type CreateGroupsResponses = {
  /**
   * Response
   * Created
   */
  201: Array<GroupOutSchema>;
};

export type CreateGroupsResponse = CreateGroupsResponses[keyof CreateGroupsResponses];

export type DeleteGroupData = {
  body?: never;
  path: {
    /**
     * Group Id
     */
    group_id: number;
  };
  query?: never;
  url: "/api/groups/{group_id}/";
};

export type DeleteGroupResponses = {
  /**
   * No Content
   */
  204: void;
};

export type DeleteGroupResponse = DeleteGroupResponses[keyof DeleteGroupResponses];

export type GetGroupData = {
  body?: never;
  path: {
    /**
     * Group Id
     */
    group_id: number;
  };
  query?: never;
  url: "/api/groups/{group_id}/";
};

export type GetGroupResponses = {
  /**
   * OK
   */
  200: GroupOutSchema;
};

export type GetGroupResponse = GetGroupResponses[keyof GetGroupResponses];

export type UpdateGroupData = {
  body: GroupUpdateInSchema;
  path: {
    /**
     * Group Id
     */
    group_id: number;
  };
  query?: never;
  url: "/api/groups/{group_id}/";
};

export type UpdateGroupResponses = {
  /**
   * OK
   */
  200: GroupOutSchema;
};

export type UpdateGroupResponse = UpdateGroupResponses[keyof UpdateGroupResponses];

export type ListImagesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Is Dirty
     * Filter by dirty status
     */
    is_dirty?: boolean | null;
    /**
     * Is Starred
     * Filter by starred status
     */
    is_starred?: boolean | null;
    /**
     * Is Deleted
     * Filter by deletion status
     */
    is_deleted?: boolean | null;
    /**
     * Folder Id
     * Filter by ImageFolder ID
     */
    folder_id?: number | null;
    /**
     * People Ids
     * Filter by Person IDs
     */
    people_ids?: Array<number> | null;
    /**
     * Pets Ids
     * Filter by Pet IDs
     */
    pets_ids?: Array<number> | null;
    /**
     * Tags Ids
     * Filter by Tag IDs
     */
    tags_ids?: Array<number> | null;
    /**
     * Exclude People Ids
     * Exclude images with these Person IDs
     */
    exclude_people_ids?: Array<number> | null;
    /**
     * Exclude Pets Ids
     * Exclude images with these Pet IDs
     */
    exclude_pets_ids?: Array<number> | null;
    /**
     * Exclude Tags Ids
     * Exclude images with these Tag IDs
     */
    exclude_tags_ids?: Array<number> | null;
    /**
     * Require All
     * Require ALL specified IDs to be present (AND logic)
     */
    require_all?: boolean;
    /**
     * Date Start
     * Filter images from this date onwards using comparison_date
     */
    date_start?: string | null;
    /**
     * Date End
     * Filter images up to this date using comparison_date
     */
    date_end?: string | null;
    /**
     * Year Start
     * Filter images from this year onwards
     */
    year_start?: number | null;
    /**
     * Year End
     * Filter images up to this year
     */
    year_end?: number | null;
    /**
     * Month Start
     * Filter images from this month onwards (1-12, includes null months)
     */
    month_start?: number | null;
    /**
     * Month End
     * Filter images up to this month (1-12, includes null months)
     */
    month_end?: number | null;
    /**
     * Day Start
     * Filter images from this day onwards (1-31, includes null days)
     */
    day_start?: number | null;
    /**
     * Day End
     * Filter images up to this day (1-31, includes null days)
     */
    day_end?: number | null;
    /**
     * Year
     * Filter images from this exact year
     */
    year?: number | null;
    /**
     * Month
     * Filter images from this exact month (1-12)
     */
    month?: number | null;
    /**
     * Day
     * Filter images from this exact day (1-31)
     */
    day?: number | null;
    /**
     * Country Code
     * Filter by country code (ISO 3166-1 alpha 2)
     */
    country_code?: string | null;
    /**
     * Subdivision Code
     * Filter by state/province code (ISO 3166-2)
     */
    subdivision_code?: string | null;
    /**
     * City
     * Filter by city name (partial match)
     */
    city?: string | null;
    /**
     * Sub Location
     * Filter by sub-location (partial match)
     */
    sub_location?: string | null;
    /**
     * Sort By
     * Field to sort by
     */
    sort_by?:
      | "created_at"
      | "-created_at"
      | "updated_at"
      | "-updated_at"
      | "pk"
      | "title"
      | "-title";
    /**
     * Limit
     */
    limit?: number;
    /**
     * Offset
     */
    offset?: number;
  };
  url: "/api/image/";
};

export type ListImagesResponses = {
  /**
   * OK
   */
  200: PagedImageThumbnailSchemaOut;
};

export type ListImagesResponse = ListImagesResponses[keyof ListImagesResponses];

export type ImageGetThumbnailsBulkInfoData = {
  /**
   * Image Ids
   */
  body: Array<number>;
  path?: never;
  query?: never;
  url: "/api/image/bulk/thumbnails/";
};

export type ImageGetThumbnailsBulkInfoResponses = {
  /**
   * Response
   * OK
   */
  200: Array<ImageThumbnailSchemaOut>;
};

export type ImageGetThumbnailsBulkInfoResponse =
  ImageGetThumbnailsBulkInfoResponses[keyof ImageGetThumbnailsBulkInfoResponses];

export type ImageGetDateData = {
  body?: never;
  path: {
    /**
     * Image Id
     */
    image_id: number;
  };
  query?: never;
  url: "/api/image/{image_id}/date/";
};

export type ImageGetDateErrors = {
  /**
   * The user does not have permissions for this image
   */
  401: unknown;
  /**
   * The image does not exist
   */
  404: unknown;
};

export type ImageGetDateResponses = {
  /**
   * OK
   */
  200: ImageDateSchemaOut;
  /**
   * The image has no date
   */
  204: void;
};

export type ImageGetDateResponse = ImageGetDateResponses[keyof ImageGetDateResponses];

export type ImageUpdateDateData = {
  body: ImageDateUpdateSchemaIn;
  path: {
    /**
     * Image Id
     */
    image_id: number;
  };
  query?: never;
  url: "/api/image/{image_id}/date/";
};

export type ImageUpdateDateErrors = {
  /**
   * The user does not have permissions for this image
   */
  401: unknown;
  /**
   * The image does not exist
   */
  404: unknown;
};

export type ImageUpdateDateResponses = {
  /**
   * OK
   */
  200: ImageDateSchemaOut;
};

export type ImageUpdateDateResponse = ImageUpdateDateResponses[keyof ImageUpdateDateResponses];

export type ImageGetLocationData = {
  body?: never;
  path: {
    /**
     * Image Id
     */
    image_id: number;
  };
  query?: never;
  url: "/api/image/{image_id}/location/";
};

export type ImageGetLocationErrors = {
  /**
   * The user does not have permissions for this image
   */
  401: unknown;
  /**
   * The image does not exist
   */
  404: unknown;
};

export type ImageGetLocationResponses = {
  /**
   * OK
   */
  200: ImageLocationSchemaOut;
  /**
   * The image has no location
   */
  204: void;
};

export type ImageGetLocationResponse = ImageGetLocationResponses[keyof ImageGetLocationResponses];

export type ImageUpdateLocationData = {
  body: ImageLocationUpdateSchemaIn;
  path: {
    /**
     * Image Id
     */
    image_id: number;
  };
  query?: never;
  url: "/api/image/{image_id}/location/";
};

export type ImageUpdateLocationErrors = {
  /**
   * The country is not found or subdivision is not in the country
   */
  400: unknown;
  /**
   * The user does not have permissions for this image
   */
  401: unknown;
  /**
   * The image does not exist
   */
  404: unknown;
};

export type ImageUpdateLocationResponses = {
  /**
   * OK
   */
  200: ImageLocationSchemaOut;
};

export type ImageUpdateLocationResponse =
  ImageUpdateLocationResponses[keyof ImageUpdateLocationResponses];

export type ImageGetMetadataData = {
  body?: never;
  path: {
    /**
     * Image Id
     */
    image_id: number;
  };
  query?: never;
  url: "/api/image/{image_id}/metadata/";
};

export type ImageGetMetadataResponses = {
  /**
   * OK
   */
  200: ImageMetadataSchemaOut;
};

export type ImageGetMetadataResponse = ImageGetMetadataResponses[keyof ImageGetMetadataResponses];

export type ImageUpdateMetadataData = {
  body: ImageMetadataUpdateSchemaIn;
  path: {
    /**
     * Image Id
     */
    image_id: number;
  };
  query?: never;
  url: "/api/image/{image_id}/metadata/";
};

export type ImageUpdateMetadataResponses = {
  /**
   * OK
   */
  200: ImageMetadataSchemaOut;
};

export type ImageUpdateMetadataResponse =
  ImageUpdateMetadataResponses[keyof ImageUpdateMetadataResponses];

export type ImageGetPeopleData = {
  body?: never;
  path: {
    /**
     * Image Id
     */
    image_id: number;
  };
  query?: never;
  url: "/api/image/{image_id}/people/";
};

export type ImageGetPeopleResponses = {
  /**
   * Response
   * OK
   */
  200: Array<PersonInImageSchemaOut>;
};

export type ImageGetPeopleResponse = ImageGetPeopleResponses[keyof ImageGetPeopleResponses];

export type ImageGetPetsData = {
  body?: never;
  path: {
    /**
     * Image Id
     */
    image_id: number;
  };
  query?: never;
  url: "/api/image/{image_id}/pets/";
};

export type ImageGetPetsResponses = {
  /**
   * Response
   * OK
   */
  200: Array<PetInImageSchemaOut>;
};

export type ImageGetPetsResponse = ImageGetPetsResponses[keyof ImageGetPetsResponses];

export type ImageGetThumbInfoData = {
  body?: never;
  path: {
    /**
     * Image Id
     */
    image_id: number;
  };
  query?: never;
  url: "/api/image/{image_id}/thumbnail/";
};

export type ImageGetThumbInfoResponses = {
  /**
   * OK
   */
  200: ImageThumbnailSchemaOut;
};

export type ImageGetThumbInfoResponse =
  ImageGetThumbInfoResponses[keyof ImageGetThumbInfoResponses];

export type ListPossibleCountryCitiesData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Country Code
     */
    country_code: string;
    /**
     * Subdivision Code
     */
    subdivision_code?: string | null;
  };
  url: "/api/location/cities/";
};

export type ListPossibleCountryCitiesResponses = {
  /**
   * Response
   * OK
   */
  200: Array<string>;
};

export type ListPossibleCountryCitiesResponse =
  ListPossibleCountryCitiesResponses[keyof ListPossibleCountryCitiesResponses];

export type ListCountriesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/location/countries/";
};

export type ListCountriesResponses = {
  /**
   * Response
   * OK
   */
  200: Array<CountryListItemSchemaOut>;
};

export type ListCountriesResponse = ListCountriesResponses[keyof ListCountriesResponses];

export type ListAllWorldCountriesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/location/countries/all/";
};

export type ListAllWorldCountriesResponses = {
  /**
   * Response
   * OK
   */
  200: Array<CountryListItemSchemaOut>;
};

export type ListAllWorldCountriesResponse =
  ListAllWorldCountriesResponses[keyof ListAllWorldCountriesResponses];

export type ListSubdivisionsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Country Code
     */
    country_code: string;
  };
  url: "/api/location/subdivisions/";
};

export type ListSubdivisionsResponses = {
  /**
   * Response
   * OK
   */
  200: Array<SubdivisionListItemSchemaOut>;
};

export type ListSubdivisionsResponse = ListSubdivisionsResponses[keyof ListSubdivisionsResponses];

export type ListAllCountrySubdivisionsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Country Code
     */
    country_code: string;
  };
  url: "/api/location/subdivisions/all/";
};

export type ListAllCountrySubdivisionsResponses = {
  /**
   * Response
   * OK
   */
  200: Array<SubdivisionListItemSchemaOut>;
};

export type ListAllCountrySubdivisionsResponse =
  ListAllCountrySubdivisionsResponses[keyof ListAllCountrySubdivisionsResponses];

export type LocationGetSubLocationsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Country Code
     */
    country_code: string;
    /**
     * City Name
     */
    city_name: string;
    /**
     * Subdivision Code
     */
    subdivision_code?: string | null;
  };
  url: "/api/location/sublocations/";
};

export type LocationGetSubLocationsResponses = {
  /**
   * Response
   * OK
   */
  200: Array<string>;
};

export type LocationGetSubLocationsResponse =
  LocationGetSubLocationsResponses[keyof LocationGetSubLocationsResponses];

export type GetAllPeopleData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Sort By
     * Field to sort by: 'name' or 'image_count'. Prefix with '-' for descending order (e.g., '-image_count').
     */
    sort_by?: "name" | "-name" | "image_count" | "-image_count";
    /**
     * Person Name
     */
    person_name?: string | null;
    /**
     * Limit
     */
    limit?: number;
    /**
     * Offset
     */
    offset?: number;
  };
  url: "/api/person/";
};

export type GetAllPeopleResponses = {
  /**
   * OK
   */
  200: PagedPersonReadOutSchema;
};

export type GetAllPeopleResponse = GetAllPeopleResponses[keyof GetAllPeopleResponses];

export type GetPersonDetailData = {
  body?: never;
  path: {
    /**
     * Person Id
     */
    person_id: number;
  };
  query?: never;
  url: "/api/person/{person_id}/";
};

export type GetPersonDetailResponses = {
  /**
   * OK
   */
  200: PersonDetailOutSchema;
};

export type GetPersonDetailResponse = GetPersonDetailResponses[keyof GetPersonDetailResponses];

export type UpdatePersonDetailData = {
  body: PersonUpdateInSchema;
  path: {
    /**
     * Person Id
     */
    person_id: number;
  };
  query?: never;
  url: "/api/person/{person_id}/";
};

export type UpdatePersonDetailResponses = {
  /**
   * OK
   */
  200: PersonDetailOutSchema;
};

export type UpdatePersonDetailResponse =
  UpdatePersonDetailResponses[keyof UpdatePersonDetailResponses];

export type GetPersonImagesData = {
  body?: never;
  path: {
    /**
     * Person Id
     */
    person_id: number;
  };
  query?: {
    /**
     * Limit
     */
    limit?: number;
    /**
     * Offset
     */
    offset?: number;
  };
  url: "/api/person/{person_id}/images/";
};

export type GetPersonImagesResponses = {
  /**
   * OK
   */
  200: PagedPersonImageOutSchema;
};

export type GetPersonImagesResponse = GetPersonImagesResponses[keyof GetPersonImagesResponses];

export type GetAllPetsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Sort By
     * Field to sort by: 'name' or 'image_count'. Prefix with '-' for descending order (e.g., '-image_count').
     */
    sort_by?: "name" | "-name" | "image_count" | "-image_count";
    /**
     * Pet Name
     */
    pet_name?: string | null;
    pet_type?: PetTypeChoices | null;
    /**
     * Limit
     */
    limit?: number;
    /**
     * Offset
     */
    offset?: number;
  };
  url: "/api/pet/";
};

export type GetAllPetsResponses = {
  /**
   * OK
   */
  200: PagedPetReadSchemaOut;
};

export type GetAllPetsResponse = GetAllPetsResponses[keyof GetAllPetsResponses];

export type GetPetDetailData = {
  body?: never;
  path: {
    /**
     * Pet Id
     */
    pet_id: number;
  };
  query?: never;
  url: "/api/pet/{pet_id}/";
};

export type GetPetDetailErrors = {
  /**
   * Not Found Response
   */
  404: unknown;
};

export type GetPetDetailResponses = {
  /**
   * OK
   */
  200: PetReadDetailSchemaOut;
};

export type GetPetDetailResponse = GetPetDetailResponses[keyof GetPetDetailResponses];

export type UpdatePetData = {
  body: PetUpdateInSchema;
  path: {
    /**
     * Pet Id
     */
    pet_id: number;
  };
  query?: never;
  url: "/api/pet/{pet_id}/";
};

export type UpdatePetErrors = {
  /**
   * Not Found Response
   */
  404: unknown;
};

export type UpdatePetResponses = {
  /**
   * OK
   */
  200: PetReadDetailSchemaOut;
};

export type UpdatePetResponse = UpdatePetResponses[keyof UpdatePetResponses];

export type GetPetImagesData = {
  body?: never;
  path: {
    /**
     * Pet Id
     */
    pet_id: number;
  };
  query?: {
    /**
     * Limit
     */
    limit?: number;
    /**
     * Offset
     */
    offset?: number;
  };
  url: "/api/pet/{pet_id}/images/";
};

export type GetPetImagesResponses = {
  /**
   * OK
   */
  200: PagedPetImageOutSchema;
};

export type GetPetImagesResponse = GetPetImagesResponses[keyof GetPetImagesResponses];

export type GetSystemSettingsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/system/settings/";
};

export type GetSystemSettingsResponses = {
  /**
   * OK
   */
  200: SiteSettingsSchemaOut;
};

export type GetSystemSettingsResponse =
  GetSystemSettingsResponses[keyof GetSystemSettingsResponses];

export type UpdateSystemSettingsData = {
  body: SiteSettingsUpdateSchemaIn;
  path?: never;
  query?: never;
  url: "/api/system/settings/";
};

export type UpdateSystemSettingsResponses = {
  /**
   * OK
   */
  200: SiteSettingsSchemaOut;
};

export type UpdateSystemSettingsResponse =
  UpdateSystemSettingsResponses[keyof UpdateSystemSettingsResponses];

export type GetSystemStatisticsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/system/statistics/";
};

export type GetSystemStatisticsResponses = {
  /**
   * OK
   */
  200: StatisticsResponseSchema;
};

export type GetSystemStatisticsResponse =
  GetSystemStatisticsResponses[keyof GetSystemStatisticsResponses];

export type UsersListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Is Active
     * Filter by active status
     */
    is_active?: boolean | null;
    /**
     * Is Staff
     * Filter by staff status
     */
    is_staff?: boolean | null;
    /**
     * Is Superuser
     * Filter by superuser status
     */
    is_superuser?: boolean | null;
    /**
     * Search
     * Search in username, email, first_name, last_name
     */
    search?: string | null;
    /**
     * Username
     * Filter by exact username
     */
    username?: string | null;
    /**
     * Email
     * Filter by email (contains)
     */
    email?: string | null;
    /**
     * Sort By
     * Field to sort by: 'username' or 'id'.
     */
    sort_by?: "username" | "pk";
  };
  url: "/api/user/";
};

export type UsersListResponses = {
  /**
   * Response
   * OK
   */
  200: Array<UserOutSchema>;
};

export type UsersListResponse = UsersListResponses[keyof UsersListResponses];

export type UsersCreateData = {
  body: UserInCreateSchemaWritable;
  path?: never;
  query?: never;
  url: "/api/user/";
};

export type UsersCreateResponses = {
  /**
   * Created
   */
  201: UserOutSchema;
};

export type UsersCreateResponse = UsersCreateResponses[keyof UsersCreateResponses];

export type UsersGetCurrentData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/user/me/";
};

export type UsersGetCurrentResponses = {
  /**
   * OK
   */
  200: UserOutSchema;
};

export type UsersGetCurrentResponse = UsersGetCurrentResponses[keyof UsersGetCurrentResponses];

export type UsersProfileGetCurrentData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/user/me/profile/";
};

export type UsersProfileGetCurrentResponses = {
  /**
   * OK
   */
  200: UserProfileOutSchema;
};

export type UsersProfileGetCurrentResponse =
  UsersProfileGetCurrentResponses[keyof UsersProfileGetCurrentResponses];

export type UsersGroupsListData = {
  body?: never;
  path: {
    /**
     * User Id
     */
    user_id: number;
  };
  query?: never;
  url: "/api/user/{user_id}/groups/";
};

export type UsersGroupsListResponses = {
  /**
   * Response
   * OK
   */
  200: Array<GroupOutSchema>;
};

export type UsersGroupsListResponse = UsersGroupsListResponses[keyof UsersGroupsListResponses];

export type UsersGroupsUpdateData = {
  /**
   * Data
   */
  body: Array<UserGroupAssignInSchema>;
  path: {
    /**
     * User Id
     */
    user_id: number;
  };
  query?: never;
  url: "/api/user/{user_id}/groups/";
};

export type UsersGroupsUpdateErrors = {
  /**
   * Some provided groups don't exist
   */
  400: unknown;
};

export type UsersGroupsUpdateResponses = {
  /**
   * Response
   * OK
   */
  200: Array<GroupOutSchema>;
};

export type UsersGroupsUpdateResponse =
  UsersGroupsUpdateResponses[keyof UsersGroupsUpdateResponses];

export type UsersGetByIdData = {
  body?: never;
  path: {
    /**
     * User Id
     */
    user_id: number;
  };
  query?: never;
  url: "/api/user/{user_id}/info/";
};

export type UsersGetByIdResponses = {
  /**
   * OK
   */
  200: UserOutSchema;
};

export type UsersGetByIdResponse = UsersGetByIdResponses[keyof UsersGetByIdResponses];

export type UsersUpdateData = {
  body: UserUpdateInSchemeWritable;
  path: {
    /**
     * User Id
     */
    user_id: number;
  };
  query?: never;
  url: "/api/user/{user_id}/info/";
};

export type UsersUpdateResponses = {
  /**
   * OK
   */
  200: UserOutSchema;
};

export type UsersUpdateResponse = UsersUpdateResponses[keyof UsersUpdateResponses];

export type UsersProfileGetByIdData = {
  body?: never;
  path: {
    /**
     * User Id
     */
    user_id: number;
  };
  query?: never;
  url: "/api/user/{user_id}/profile/";
};

export type UsersProfileGetByIdResponses = {
  /**
   * OK
   */
  200: UserProfileOutSchema;
};

export type UsersProfileGetByIdResponse =
  UsersProfileGetByIdResponses[keyof UsersProfileGetByIdResponses];

export type UsersProfileUpdateData = {
  body: UserProfileUpdateSchema;
  path: {
    /**
     * User Id
     */
    user_id: number;
  };
  query?: never;
  url: "/api/user/{user_id}/profile/";
};

export type UsersProfileUpdateResponses = {
  /**
   * OK
   */
  200: UserProfileOutSchema;
};

export type UsersProfileUpdateResponse =
  UsersProfileUpdateResponses[keyof UsersProfileUpdateResponses];

export type ClientOptions = {
  baseURL: string;
};
