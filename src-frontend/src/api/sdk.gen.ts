// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "@hey-api/client-axios";
import type {
  GetAllAlbumsData,
  GetAllAlbumsResponse,
  CreateAlbumData,
  CreateAlbumResponse,
  DeleteAlbumData,
  DeleteAlbumResponse,
  GetSingleAlbumInfoData,
  GetSingleAlbumInfoResponse,
  UpdateAlbumInfoData,
  UpdateAlbumInfoResponse,
  AddImageToAlbumData,
  AddImageToAlbumResponse,
  DownloadAlbumData,
  DeleteImageFromAlbumData,
  DeleteImageFromAlbumResponse,
  UpdateAlbumSortingData,
  UpdateAlbumSortingResponse,
  AuthGetCsrfTokenData,
  AuthGetCsrfTokenResponse,
  AuthLoginData,
  AuthLoginResponse,
  AuthLogoutData,
  AuthLogoutResponse,
  FolderListRootsData,
  FolderListRootsResponse,
  FolderGetDetailsData,
  FolderGetDetailsResponse,
  UpdateFolderInfoData,
  UpdateFolderInfoResponse,
  ListGroupsData,
  ListGroupsResponse,
  CreateGroupsData,
  CreateGroupsResponse,
  DeleteGroupData,
  DeleteGroupResponse,
  GetGroupData,
  GetGroupResponse,
  UpdateGroupData,
  UpdateGroupResponse,
  ImageGetThumbnailsBulkInfoData,
  ImageGetThumbnailsBulkInfoResponse,
  ImageGetDateData,
  ImageGetDateResponse,
  ImageUpdateDateData,
  ImageUpdateDateResponse,
  ImageGetLocationData,
  ImageGetLocationResponse,
  ImageUpdateLocationData,
  ImageUpdateLocationResponse,
  ImageGetMetadataData,
  ImageGetMetadataResponse,
  ImageUpdateMetadataData,
  ImageUpdateMetadataResponse,
  ImageGetPeopleData,
  ImageGetPeopleResponse,
  ImageGetPetsData,
  ImageGetPetsResponse,
  ImageGetThumbInfoData,
  ImageGetThumbInfoResponse,
  LocationGetCitiesData,
  LocationGetCitiesResponse,
  LocationGetCountriesData,
  LocationGetCountriesResponse,
  LocationGetSubdivisionsData,
  LocationGetSubdivisionsResponse,
  LocationGetSubLocationsData,
  LocationGetSubLocationsResponse,
  GetAllPeopleData,
  GetAllPeopleResponse,
  GetPersonDetailData,
  GetPersonDetailResponse,
  UpdatePersonDetailData,
  UpdatePersonDetailResponse,
  GetPersonImagesData,
  GetPersonImagesResponse,
  GetAllPetsData,
  GetAllPetsResponse,
  GetPetDetailData,
  GetPetDetailResponse,
  UpdatePetData,
  UpdatePetResponse,
  GetPetImagesData,
  GetPetImagesResponse,
  GetSystemSettingsData,
  GetSystemSettingsResponse,
  UpdateSystemSettingsData,
  UpdateSystemSettingsResponse,
  GetSystemStatisticsData,
  GetSystemStatisticsResponse,
  UsersListData,
  UsersListResponse,
  UsersCreateData,
  UsersCreateResponse,
  UsersGetCurrentData,
  UsersGetCurrentResponse,
  UsersProfileGetCurrentData,
  UsersProfileGetCurrentResponse,
  UsersGroupsListData,
  UsersGroupsListResponse,
  UsersGroupsUpdateData,
  UsersGroupsUpdateResponse,
  UsersGetByIdData,
  UsersGetByIdResponse,
  UsersUpdateData,
  UsersUpdateResponse,
  UsersProfileGetByIdData,
  UsersProfileGetByIdResponse,
  UsersProfileUpdateData,
  UsersProfileUpdateResponse,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get Albums
 * List albums viewable by the current user
 */
export const getAllAlbums = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllAlbumsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetAllAlbumsResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/",
    ...options,
  });
};

/**
 * Create Album
 * Create a new album with optional view/edit groups
 */
export const createAlbum = <ThrowOnError extends boolean = false>(
  options: Options<CreateAlbumData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<CreateAlbumResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Album
 */
export const deleteAlbum = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAlbumData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<DeleteAlbumResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/{album_id}/",
    ...options,
  });
};

/**
 * Get Album
 * Retrieve full details of a single album
 */
export const getSingleAlbumInfo = <ThrowOnError extends boolean = false>(
  options: Options<GetSingleAlbumInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetSingleAlbumInfoResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/{album_id}/",
    ...options,
  });
};

/**
 * Update Album
 * Update album name, description, and group permissions
 */
export const updateAlbumInfo = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAlbumInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<UpdateAlbumInfoResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/{album_id}/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Add Image To Album
 */
export const addImageToAlbum = <ThrowOnError extends boolean = false>(
  options: Options<AddImageToAlbumData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<AddImageToAlbumResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/{album_id}/add/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Download Album
 * Download all images in an album as a ZIP archive.
 * You can choose original or full-size paths. Requires view access.
 */
export const downloadAlbum = <ThrowOnError extends boolean = false>(
  options: Options<DownloadAlbumData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/{album_id}/download/",
    ...options,
  });
};

/**
 * Remove Image From Album
 */
export const deleteImageFromAlbum = <ThrowOnError extends boolean = false>(
  options: Options<DeleteImageFromAlbumData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    DeleteImageFromAlbumResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/{album_id}/remove/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update Album Sorting
 * Reorder images in the album using a list of image IDs
 */
export const updateAlbumSorting = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAlbumSortingData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateAlbumSortingResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/{album_id}/sort/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Csrf Token
 */
export const authGetCsrfToken = <ThrowOnError extends boolean = false>(
  options?: Options<AuthGetCsrfTokenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<AuthGetCsrfTokenResponse, unknown, ThrowOnError>({
    url: "/api/auth/csrf/",
    ...options,
  });
};

/**
 * Login
 */
export const authLogin = <ThrowOnError extends boolean = false>(
  options: Options<AuthLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<AuthLoginResponse, unknown, ThrowOnError>({
    url: "/api/auth/login/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Logout
 */
export const authLogout = <ThrowOnError extends boolean = false>(
  options?: Options<AuthLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<AuthLogoutResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/auth/logout/",
    ...options,
  });
};

/**
 * List Image Folders
 * List root image folders with permission filtering
 */
export const folderListRoots = <ThrowOnError extends boolean = false>(
  options?: Options<FolderListRootsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<FolderListRootsResponse, unknown, ThrowOnError>({
    url: "/api/folder/",
    ...options,
  });
};

/**
 * Get Image Folder
 * Get details of a specific image folder with children and images
 */
export const folderGetDetails = <ThrowOnError extends boolean = false>(
  options: Options<FolderGetDetailsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<FolderGetDetailsResponse, unknown, ThrowOnError>({
    url: "/api/folder/{folder_id}/",
    ...options,
  });
};

/**
 * Update Folder
 */
export const updateFolderInfo = <ThrowOnError extends boolean = false>(
  options: Options<UpdateFolderInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<UpdateFolderInfoResponse, unknown, ThrowOnError>({
    url: "/api/folder/{folder_id}/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List Groups
 * Retrieves all groups.
 *
 * Returns:
 * A list of GroupOutSchema objects representing all groups.
 */
export const listGroups = <ThrowOnError extends boolean = false>(
  options?: Options<ListGroupsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<ListGroupsResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/groups/",
    ...options,
  });
};

/**
 * Create Groups
 * Creates one or more groups from a list of group schemas or a single group.
 *
 * Args:
 * request: The Django request object.
 * data: A GroupCreateInSchema object or list of GroupCreateInSchema objects.
 *
 * Returns:
 * A list of GroupOutSchema objects representing the created groups.
 */
export const createGroups = <ThrowOnError extends boolean = false>(
  options: Options<CreateGroupsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<CreateGroupsResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/groups/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Group
 * Deletes a single group by ID.
 *
 * Args:
 * group_id: The ID of the group to delete.
 *
 * Returns:
 * HTTP 204 No Content on successful deletion.
 */
export const deleteGroup = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<DeleteGroupResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/groups/{group_id}/",
    ...options,
  });
};

/**
 * Get Group
 * Retrieves a single group by ID.
 *
 * Args:
 * group_id: The ID of the group to retrieve.
 *
 * Returns:
 * A GroupOutSchema object representing the requested group.
 */
export const getGroup = <ThrowOnError extends boolean = false>(
  options: Options<GetGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetGroupResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/groups/{group_id}/",
    ...options,
  });
};

/**
 * Update Group
 * Updates a single group's information.
 *
 * Args:
 * group_id: The ID of the group to update.
 * data: The updated group data.
 *
 * Returns:
 * A GroupOutSchema object representing the updated group.
 */
export const updateGroup = <ThrowOnError extends boolean = false>(
  options: Options<UpdateGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<UpdateGroupResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/groups/{group_id}/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Image Thumbnails Bulk Info
 */
export const imageGetThumbnailsBulkInfo = <ThrowOnError extends boolean = false>(
  options: Options<ImageGetThumbnailsBulkInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ImageGetThumbnailsBulkInfoResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/bulk/thumbnails/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Image Date
 */
export const imageGetDate = <ThrowOnError extends boolean = false>(
  options: Options<ImageGetDateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<ImageGetDateResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/date/",
    ...options,
  });
};

/**
 * Update Image Date
 */
export const imageUpdateDate = <ThrowOnError extends boolean = false>(
  options: Options<ImageUpdateDateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<ImageUpdateDateResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/date/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Image Location
 */
export const imageGetLocation = <ThrowOnError extends boolean = false>(
  options: Options<ImageGetLocationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<ImageGetLocationResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/location/",
    ...options,
  });
};

/**
 * Update Image Location
 */
export const imageUpdateLocation = <ThrowOnError extends boolean = false>(
  options: Options<ImageUpdateLocationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    ImageUpdateLocationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/location/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Image Details
 */
export const imageGetMetadata = <ThrowOnError extends boolean = false>(
  options: Options<ImageGetMetadataData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<ImageGetMetadataResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/metadata/",
    ...options,
  });
};

/**
 * Update Image Details
 */
export const imageUpdateMetadata = <ThrowOnError extends boolean = false>(
  options: Options<ImageUpdateMetadataData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    ImageUpdateMetadataResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/metadata/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Image People
 */
export const imageGetPeople = <ThrowOnError extends boolean = false>(
  options: Options<ImageGetPeopleData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<ImageGetPeopleResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/people/",
    ...options,
  });
};

/**
 * Get Image Pets
 */
export const imageGetPets = <ThrowOnError extends boolean = false>(
  options: Options<ImageGetPetsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<ImageGetPetsResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/pets/",
    ...options,
  });
};

/**
 * Get Image Thumbnail Info
 */
export const imageGetThumbInfo = <ThrowOnError extends boolean = false>(
  options: Options<ImageGetThumbInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<ImageGetThumbInfoResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/thumbnail/",
    ...options,
  });
};

/**
 * Get Existing Cities
 */
export const locationGetCities = <ThrowOnError extends boolean = false>(
  options: Options<LocationGetCitiesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<LocationGetCitiesResponse, unknown, ThrowOnError>({
    url: "/api/location/cities/",
    ...options,
  });
};

/**
 * Get All Countries
 */
export const locationGetCountries = <ThrowOnError extends boolean = false>(
  options?: Options<LocationGetCountriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    LocationGetCountriesResponse,
    unknown,
    ThrowOnError
  >({
    url: "/api/location/countries/",
    ...options,
  });
};

/**
 * Get Subdivisions For Country
 */
export const locationGetSubdivisions = <ThrowOnError extends boolean = false>(
  options: Options<LocationGetSubdivisionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    LocationGetSubdivisionsResponse,
    unknown,
    ThrowOnError
  >({
    url: "/api/location/subdivisions/",
    ...options,
  });
};

/**
 * Get Existing Sublocations
 */
export const locationGetSubLocations = <ThrowOnError extends boolean = false>(
  options: Options<LocationGetSubLocationsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    LocationGetSubLocationsResponse,
    unknown,
    ThrowOnError
  >({
    url: "/api/location/sublocations/",
    ...options,
  });
};

/**
 * Get All People
 */
export const getAllPeople = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllPeopleData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetAllPeopleResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/person/",
    ...options,
  });
};

/**
 * Get Person Detail
 */
export const getPersonDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetPersonDetailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetPersonDetailResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/person/{person_id}/",
    ...options,
  });
};

/**
 * Update Person
 */
export const updatePersonDetail = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePersonDetailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdatePersonDetailResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/person/{person_id}/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Person Images
 */
export const getPersonImages = <ThrowOnError extends boolean = false>(
  options: Options<GetPersonImagesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetPersonImagesResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/person/{person_id}/images/",
    ...options,
  });
};

/**
 * Get All Pets
 */
export const getAllPets = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllPetsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetAllPetsResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/pet/",
    ...options,
  });
};

/**
 * Get Single Pet
 */
export const getPetDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetPetDetailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetPetDetailResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/pet/{pet_id}/",
    ...options,
  });
};

/**
 * Update Pet
 */
export const updatePet = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<UpdatePetResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/pet/{pet_id}/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Person Images
 */
export const getPetImages = <ThrowOnError extends boolean = false>(
  options: Options<GetPetImagesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetPetImagesResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/pet/{pet_id}/images/",
    ...options,
  });
};

/**
 * Get System Settings
 */
export const getSystemSettings = <ThrowOnError extends boolean = false>(
  options?: Options<GetSystemSettingsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetSystemSettingsResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/system/settings/",
    ...options,
  });
};

/**
 * Update System Settings
 */
export const updateSystemSettings = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSystemSettingsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateSystemSettingsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/system/settings/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get System Statistics
 * Returns statistics about the system, including counts of various objects
 * and disk space usage, filtered by the current user's view/edit permissions.
 * System-wide object counts are no longer exposed to prevent information leakage.
 */
export const getSystemStatistics = <ThrowOnError extends boolean = false>(
  options?: Options<GetSystemStatisticsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSystemStatisticsResponse,
    unknown,
    ThrowOnError
  >({
    url: "/api/system/statistics/",
    ...options,
  });
};

/**
 * Users List
 * Get all users with filtering and pagination.
 */
export const usersList = <ThrowOnError extends boolean = false>(
  options?: Options<UsersListData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<UsersListResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/",
    ...options,
  });
};

/**
 * Users Create
 * Create a new user with proper permission checks and validation.
 */
export const usersCreate = <ThrowOnError extends boolean = false>(
  options: Options<UsersCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<UsersCreateResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Users Get Current
 * Get current user's information.
 */
export const usersGetCurrent = <ThrowOnError extends boolean = false>(
  options?: Options<UsersGetCurrentData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<UsersGetCurrentResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/me/",
    ...options,
  });
};

/**
 * Users Profile Get Current
 * Get current user's profile.
 */
export const usersProfileGetCurrent = <ThrowOnError extends boolean = false>(
  options?: Options<UsersProfileGetCurrentData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UsersProfileGetCurrentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/me/profile/",
    ...options,
  });
};

/**
 * Users Groups List
 * Get user's groups with permission checks.
 */
export const usersGroupsList = <ThrowOnError extends boolean = false>(
  options: Options<UsersGroupsListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<UsersGroupsListResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/{user_id}/groups/",
    ...options,
  });
};

/**
 * Users Groups Update
 * Set user's groups with validation.
 */
export const usersGroupsUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UsersGroupsUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<UsersGroupsUpdateResponse, unknown, ThrowOnError>(
    {
      security: [
        {
          in: "cookie",
          name: "sessionid",
          type: "apiKey",
        },
      ],
      url: "/api/user/{user_id}/groups/",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    },
  );
};

/**
 * Users Get By Id
 * Get user information with proper permission checks.
 */
export const usersGetById = <ThrowOnError extends boolean = false>(
  options: Options<UsersGetByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<UsersGetByIdResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/{user_id}/info/",
    ...options,
  });
};

/**
 * Users Update
 * Update user information with proper permission and validation checks.
 */
export const usersUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UsersUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<UsersUpdateResponse, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/{user_id}/info/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Users Profile Get By Id
 * Get user profile with permission checks.
 */
export const usersProfileGetById = <ThrowOnError extends boolean = false>(
  options: Options<UsersProfileGetByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<UsersProfileGetByIdResponse, unknown, ThrowOnError>(
    {
      security: [
        {
          in: "cookie",
          name: "sessionid",
          type: "apiKey",
        },
      ],
      url: "/api/user/{user_id}/profile/",
      ...options,
    },
  );
};

/**
 * Users Profile Update
 * Edit user profile with permission checks.
 */
export const usersProfileUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UsersProfileUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UsersProfileUpdateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/{user_id}/profile/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};
