// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  GetAllAlbumsData,
  GetAllAlbumsResponses,
  CreateAlbumData,
  CreateAlbumResponses,
  DeleteAlbumData,
  DeleteAlbumResponses,
  GetSingleAlbumInfoData,
  GetSingleAlbumInfoResponses,
  GetSingleAlbumInfoErrors,
  UpdateAlbumInfoData,
  UpdateAlbumInfoResponses,
  UpdateAlbumInfoErrors,
  AddImageToAlbumData,
  AddImageToAlbumResponses,
  DownloadAlbumData,
  DownloadAlbumResponses,
  DeleteImageFromAlbumData,
  DeleteImageFromAlbumResponses,
  UpdateAlbumSortingData,
  UpdateAlbumSortingResponses,
  UpdateAlbumSortingErrors,
  AuthGetCsrfTokenData,
  AuthGetCsrfTokenResponses,
  AuthLoginData,
  AuthLoginResponses,
  AuthLoginErrors,
  AuthLogoutData,
  AuthLogoutResponses,
  FolderListRootsData,
  FolderListRootsResponses,
  ListAllFoldersData,
  ListAllFoldersResponses,
  FolderGetDetailsData,
  FolderGetDetailsResponses,
  UpdateFolderInfoData,
  UpdateFolderInfoResponses,
  ListGroupsData,
  ListGroupsResponses,
  CreateGroupsData,
  CreateGroupsResponses,
  DeleteGroupData,
  DeleteGroupResponses,
  GetGroupData,
  GetGroupResponses,
  UpdateGroupData,
  UpdateGroupResponses,
  ListImagesData,
  ListImagesResponses,
  ImageGetThumbnailsBulkInfoData,
  ImageGetThumbnailsBulkInfoResponses,
  ImageGetDateData,
  ImageGetDateResponses,
  ImageGetDateErrors,
  ImageUpdateDateData,
  ImageUpdateDateResponses,
  ImageUpdateDateErrors,
  ImageGetLocationData,
  ImageGetLocationResponses,
  ImageGetLocationErrors,
  ImageUpdateLocationData,
  ImageUpdateLocationResponses,
  ImageUpdateLocationErrors,
  ImageGetMetadataData,
  ImageGetMetadataResponses,
  ImageUpdateMetadataData,
  ImageUpdateMetadataResponses,
  ImageGetPeopleData,
  ImageGetPeopleResponses,
  ImageGetPetsData,
  ImageGetPetsResponses,
  ImageGetThumbInfoData,
  ImageGetThumbInfoResponses,
  ListPossibleCountryCitiesData,
  ListPossibleCountryCitiesResponses,
  ListCountriesData,
  ListCountriesResponses,
  ListAllWorldCountriesData,
  ListAllWorldCountriesResponses,
  ListSubdivisionsData,
  ListSubdivisionsResponses,
  ListAllCountrySubdivisionsData,
  ListAllCountrySubdivisionsResponses,
  LocationGetSubLocationsData,
  LocationGetSubLocationsResponses,
  GetAllPeopleData,
  GetAllPeopleResponses,
  GetPersonDetailData,
  GetPersonDetailResponses,
  UpdatePersonDetailData,
  UpdatePersonDetailResponses,
  GetPersonImagesData,
  GetPersonImagesResponses,
  GetAllPetsData,
  GetAllPetsResponses,
  GetPetDetailData,
  GetPetDetailResponses,
  GetPetDetailErrors,
  UpdatePetData,
  UpdatePetResponses,
  UpdatePetErrors,
  GetPetImagesData,
  GetPetImagesResponses,
  GetSystemSettingsData,
  GetSystemSettingsResponses,
  UpdateSystemSettingsData,
  UpdateSystemSettingsResponses,
  GetSystemStatisticsData,
  GetSystemStatisticsResponses,
  UsersListData,
  UsersListResponses,
  UsersCreateData,
  UsersCreateResponses,
  UsersGetCurrentData,
  UsersGetCurrentResponses,
  UsersProfileGetCurrentData,
  UsersProfileGetCurrentResponses,
  UsersGroupsListData,
  UsersGroupsListResponses,
  UsersGroupsUpdateData,
  UsersGroupsUpdateResponses,
  UsersGroupsUpdateErrors,
  UsersGetByIdData,
  UsersGetByIdResponses,
  UsersUpdateData,
  UsersUpdateResponses,
  UsersProfileGetByIdData,
  UsersProfileGetByIdResponses,
  UsersProfileUpdateData,
  UsersProfileUpdateResponses,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get Albums
 * List albums viewable by the current user
 */
export const getAllAlbums = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllAlbumsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetAllAlbumsResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/",
    ...options,
  });
};

/**
 * Create Album
 * Create a new album with optional view/edit groups
 */
export const createAlbum = <ThrowOnError extends boolean = false>(
  options: Options<CreateAlbumData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<CreateAlbumResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Album
 */
export const deleteAlbum = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAlbumData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<DeleteAlbumResponses, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/{album_id}/",
    ...options,
  });
};

/**
 * Get Album
 * Retrieve full details of a single album
 */
export const getSingleAlbumInfo = <ThrowOnError extends boolean = false>(
  options: Options<GetSingleAlbumInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetSingleAlbumInfoResponses,
    GetSingleAlbumInfoErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/{album_id}/",
    ...options,
  });
};

/**
 * Update Album
 * Update album name, description, and group permissions
 */
export const updateAlbumInfo = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAlbumInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateAlbumInfoResponses,
    UpdateAlbumInfoErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/{album_id}/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Add Image To Album
 */
export const addImageToAlbum = <ThrowOnError extends boolean = false>(
  options: Options<AddImageToAlbumData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<AddImageToAlbumResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/{album_id}/add/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Download Album
 * Download all images in an album as a ZIP archive.
 * You can choose original or full-size paths. Requires view access.
 */
export const downloadAlbum = <ThrowOnError extends boolean = false>(
  options: Options<DownloadAlbumData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<DownloadAlbumResponses, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/{album_id}/download/",
    ...options,
  });
};

/**
 * Remove Image From Album
 */
export const deleteImageFromAlbum = <ThrowOnError extends boolean = false>(
  options: Options<DeleteImageFromAlbumData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    DeleteImageFromAlbumResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/{album_id}/remove/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Update Album Sorting
 * Reorder images in the album using a list of image IDs
 */
export const updateAlbumSorting = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAlbumSortingData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateAlbumSortingResponses,
    UpdateAlbumSortingErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/album/{album_id}/sort/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Csrf Token
 */
export const authGetCsrfToken = <ThrowOnError extends boolean = false>(
  options?: Options<AuthGetCsrfTokenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<AuthGetCsrfTokenResponses, unknown, ThrowOnError>({
    responseType: "json",
    url: "/api/auth/csrf/",
    ...options,
  });
};

/**
 * Login
 */
export const authLogin = <ThrowOnError extends boolean = false>(
  options: Options<AuthLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<AuthLoginResponses, AuthLoginErrors, ThrowOnError>(
    {
      url: "/api/auth/login/",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    },
  );
};

/**
 * Logout
 */
export const authLogout = <ThrowOnError extends boolean = false>(
  options?: Options<AuthLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<AuthLogoutResponses, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/auth/logout/",
    ...options,
  });
};

/**
 * List Image Folders
 * List root image folders with permission filtering
 */
export const folderListRoots = <ThrowOnError extends boolean = false>(
  options?: Options<FolderListRootsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<FolderListRootsResponses, unknown, ThrowOnError>({
    responseType: "json",
    url: "/api/folder/",
    ...options,
  });
};

/**
 * List All Image Folders
 * List all image folders with permission filtering
 */
export const listAllFolders = <ThrowOnError extends boolean = false>(
  options?: Options<ListAllFoldersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<ListAllFoldersResponses, unknown, ThrowOnError>({
    responseType: "json",
    url: "/api/folder/all/",
    ...options,
  });
};

/**
 * Get Image Folder
 * Get details of a specific image folder with children and images
 */
export const folderGetDetails = <ThrowOnError extends boolean = false>(
  options: Options<FolderGetDetailsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<FolderGetDetailsResponses, unknown, ThrowOnError>({
    responseType: "json",
    url: "/api/folder/{folder_id}/",
    ...options,
  });
};

/**
 * Update Folder
 */
export const updateFolderInfo = <ThrowOnError extends boolean = false>(
  options: Options<UpdateFolderInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<UpdateFolderInfoResponses, unknown, ThrowOnError>(
    {
      responseType: "json",
      url: "/api/folder/{folder_id}/",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    },
  );
};

/**
 * List Groups
 * Retrieves all groups.
 *
 * Returns:
 * A list of GroupOutSchema objects representing all groups.
 */
export const listGroups = <ThrowOnError extends boolean = false>(
  options?: Options<ListGroupsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<ListGroupsResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/groups/",
    ...options,
  });
};

/**
 * Create Groups
 * Creates one or more groups from a list of group schemas or a single group.
 *
 * Args:
 * request: The Django request object.
 * data: A GroupCreateInSchema object or list of GroupCreateInSchema objects.
 *
 * Returns:
 * A list of GroupOutSchema objects representing the created groups.
 */
export const createGroups = <ThrowOnError extends boolean = false>(
  options: Options<CreateGroupsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<CreateGroupsResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/groups/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Group
 * Deletes a single group by ID.
 *
 * Args:
 * group_id: The ID of the group to delete.
 *
 * Returns:
 * HTTP 204 No Content on successful deletion.
 */
export const deleteGroup = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<DeleteGroupResponses, unknown, ThrowOnError>({
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/groups/{group_id}/",
    ...options,
  });
};

/**
 * Get Group
 * Retrieves a single group by ID.
 *
 * Args:
 * group_id: The ID of the group to retrieve.
 *
 * Returns:
 * A GroupOutSchema object representing the requested group.
 */
export const getGroup = <ThrowOnError extends boolean = false>(
  options: Options<GetGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetGroupResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/groups/{group_id}/",
    ...options,
  });
};

/**
 * Update Group
 * Updates a single group's information.
 *
 * Args:
 * group_id: The ID of the group to update.
 * data: The updated group data.
 *
 * Returns:
 * A GroupOutSchema object representing the updated group.
 */
export const updateGroup = <ThrowOnError extends boolean = false>(
  options: Options<UpdateGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<UpdateGroupResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/groups/{group_id}/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List Images
 */
export const listImages = <ThrowOnError extends boolean = false>(
  options?: Options<ListImagesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<ListImagesResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/",
    ...options,
  });
};

/**
 * Get Image Thumbnails Bulk Info
 */
export const imageGetThumbnailsBulkInfo = <ThrowOnError extends boolean = false>(
  options: Options<ImageGetThumbnailsBulkInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ImageGetThumbnailsBulkInfoResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/bulk/thumbnails/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Image Date
 */
export const imageGetDate = <ThrowOnError extends boolean = false>(
  options: Options<ImageGetDateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ImageGetDateResponses,
    ImageGetDateErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/date/",
    ...options,
  });
};

/**
 * Update Image Date
 */
export const imageUpdateDate = <ThrowOnError extends boolean = false>(
  options: Options<ImageUpdateDateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    ImageUpdateDateResponses,
    ImageUpdateDateErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/date/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Image Location
 */
export const imageGetLocation = <ThrowOnError extends boolean = false>(
  options: Options<ImageGetLocationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ImageGetLocationResponses,
    ImageGetLocationErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/location/",
    ...options,
  });
};

/**
 * Update Image Location
 */
export const imageUpdateLocation = <ThrowOnError extends boolean = false>(
  options: Options<ImageUpdateLocationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    ImageUpdateLocationResponses,
    ImageUpdateLocationErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/location/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Image Details
 */
export const imageGetMetadata = <ThrowOnError extends boolean = false>(
  options: Options<ImageGetMetadataData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<ImageGetMetadataResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/metadata/",
    ...options,
  });
};

/**
 * Update Image Details
 */
export const imageUpdateMetadata = <ThrowOnError extends boolean = false>(
  options: Options<ImageUpdateMetadataData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    ImageUpdateMetadataResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/metadata/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Image People
 */
export const imageGetPeople = <ThrowOnError extends boolean = false>(
  options: Options<ImageGetPeopleData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<ImageGetPeopleResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/people/",
    ...options,
  });
};

/**
 * Get Image Pets
 */
export const imageGetPets = <ThrowOnError extends boolean = false>(
  options: Options<ImageGetPetsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<ImageGetPetsResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/pets/",
    ...options,
  });
};

/**
 * Get Image Thumbnail Info
 */
export const imageGetThumbInfo = <ThrowOnError extends boolean = false>(
  options: Options<ImageGetThumbInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<ImageGetThumbInfoResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/image/{image_id}/thumbnail/",
    ...options,
  });
};

/**
 * Get Existing Cities
 */
export const listPossibleCountryCities = <ThrowOnError extends boolean = false>(
  options: Options<ListPossibleCountryCitiesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListPossibleCountryCitiesResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/location/cities/",
    ...options,
  });
};

/**
 * Get Countries With Images In Them
 * List all countries where images have been taken
 */
export const listCountries = <ThrowOnError extends boolean = false>(
  options?: Options<ListCountriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<ListCountriesResponses, unknown, ThrowOnError>({
    responseType: "json",
    url: "/api/location/countries/",
    ...options,
  });
};

/**
 * Get All Countries
 * List all countries in the world, as per ISO-3166-1
 */
export const listAllWorldCountries = <ThrowOnError extends boolean = false>(
  options?: Options<ListAllWorldCountriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListAllWorldCountriesResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/location/countries/all/",
    ...options,
  });
};

/**
 * Get Subdivisions With Images In Them
 * List all subdivisions/states where images have been taken, filtered by country code
 */
export const listSubdivisions = <ThrowOnError extends boolean = false>(
  options: Options<ListSubdivisionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<ListSubdivisionsResponses, unknown, ThrowOnError>({
    responseType: "json",
    url: "/api/location/subdivisions/",
    ...options,
  });
};

/**
 * Get Subdivisions For Country
 * List all subdivisions of a given country, as per ISO-3166-2
 */
export const listAllCountrySubdivisions = <ThrowOnError extends boolean = false>(
  options: Options<ListAllCountrySubdivisionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListAllCountrySubdivisionsResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/location/subdivisions/all/",
    ...options,
  });
};

/**
 * Get Existing Sublocations
 */
export const locationGetSubLocations = <ThrowOnError extends boolean = false>(
  options: Options<LocationGetSubLocationsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    LocationGetSubLocationsResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/location/sublocations/",
    ...options,
  });
};

/**
 * Get All People
 */
export const getAllPeople = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllPeopleData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetAllPeopleResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/person/",
    ...options,
  });
};

/**
 * Get Person Detail
 */
export const getPersonDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetPersonDetailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetPersonDetailResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/person/{person_id}/",
    ...options,
  });
};

/**
 * Update Person
 */
export const updatePersonDetail = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePersonDetailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdatePersonDetailResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/person/{person_id}/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Person Images
 */
export const getPersonImages = <ThrowOnError extends boolean = false>(
  options: Options<GetPersonImagesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetPersonImagesResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/person/{person_id}/images/",
    ...options,
  });
};

/**
 * Get All Pets
 */
export const getAllPets = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllPetsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetAllPetsResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/pet/",
    ...options,
  });
};

/**
 * Get Single Pet
 */
export const getPetDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetPetDetailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetPetDetailResponses,
    GetPetDetailErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/pet/{pet_id}/",
    ...options,
  });
};

/**
 * Update Pet
 */
export const updatePet = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdatePetResponses,
    UpdatePetErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/pet/{pet_id}/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Person Images
 */
export const getPetImages = <ThrowOnError extends boolean = false>(
  options: Options<GetPetImagesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetPetImagesResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/pet/{pet_id}/images/",
    ...options,
  });
};

/**
 * Get System Settings
 */
export const getSystemSettings = <ThrowOnError extends boolean = false>(
  options?: Options<GetSystemSettingsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetSystemSettingsResponses, unknown, ThrowOnError>(
    {
      responseType: "json",
      security: [
        {
          in: "cookie",
          name: "sessionid",
          type: "apiKey",
        },
      ],
      url: "/api/system/settings/",
      ...options,
    },
  );
};

/**
 * Update System Settings
 */
export const updateSystemSettings = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSystemSettingsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateSystemSettingsResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/system/settings/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get System Statistics
 * Returns statistics about the system, including counts of various objects
 * and disk space usage, filtered by the current user's view/edit permissions.
 * System-wide object counts are no longer exposed to prevent information leakage.
 */
export const getSystemStatistics = <ThrowOnError extends boolean = false>(
  options?: Options<GetSystemStatisticsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSystemStatisticsResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    url: "/api/system/statistics/",
    ...options,
  });
};

/**
 * Users List
 * Get all users with filtering and pagination.
 */
export const usersList = <ThrowOnError extends boolean = false>(
  options?: Options<UsersListData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<UsersListResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/",
    ...options,
  });
};

/**
 * Users Create
 * Create a new user with proper permission checks and validation.
 */
export const usersCreate = <ThrowOnError extends boolean = false>(
  options: Options<UsersCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<UsersCreateResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Users Get Current
 * Get current user's information.
 */
export const usersGetCurrent = <ThrowOnError extends boolean = false>(
  options?: Options<UsersGetCurrentData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<UsersGetCurrentResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/me/",
    ...options,
  });
};

/**
 * Users Profile Get Current
 * Get current user's profile.
 */
export const usersProfileGetCurrent = <ThrowOnError extends boolean = false>(
  options?: Options<UsersProfileGetCurrentData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UsersProfileGetCurrentResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/me/profile/",
    ...options,
  });
};

/**
 * Users Groups List
 * Get user's groups with permission checks.
 */
export const usersGroupsList = <ThrowOnError extends boolean = false>(
  options: Options<UsersGroupsListData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<UsersGroupsListResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/{user_id}/groups/",
    ...options,
  });
};

/**
 * Users Groups Update
 * Set user's groups with validation.
 */
export const usersGroupsUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UsersGroupsUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UsersGroupsUpdateResponses,
    UsersGroupsUpdateErrors,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/{user_id}/groups/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Users Get By Id
 * Get user information with proper permission checks.
 */
export const usersGetById = <ThrowOnError extends boolean = false>(
  options: Options<UsersGetByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<UsersGetByIdResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/{user_id}/info/",
    ...options,
  });
};

/**
 * Users Update
 * Update user information with proper permission and validation checks.
 */
export const usersUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UsersUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<UsersUpdateResponses, unknown, ThrowOnError>({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/{user_id}/info/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Users Profile Get By Id
 * Get user profile with permission checks.
 */
export const usersProfileGetById = <ThrowOnError extends boolean = false>(
  options: Options<UsersProfileGetByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    UsersProfileGetByIdResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/{user_id}/profile/",
    ...options,
  });
};

/**
 * Users Profile Update
 * Edit user profile with permission checks.
 */
export const usersProfileUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UsersProfileUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UsersProfileUpdateResponses,
    unknown,
    ThrowOnError
  >({
    responseType: "json",
    security: [
      {
        in: "cookie",
        name: "sessionid",
        type: "apiKey",
      },
    ],
    url: "/api/user/{user_id}/profile/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};
