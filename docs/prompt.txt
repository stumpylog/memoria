I want you help designing a role based access system.  We're using Django 5, with the standard User and Group models as the authentication system.

There are a few custom models to consider, an Image, ImageFolder, Person, Pet, Album.

An ImageFolder may contain child ImageFolders (through django-treenode) as well as having a one to many relation to Image.

A Album, Person or Pet instance has a many to many relation to Image.

I want to object level permissions, based on Group membership, to these models.  I want it to be possible for users to view only a subset of each, or edit only a subset of each (which would be a subset of the viewable items).  Additionally, for users who are superusers, they should be able to view and edit anything.  If an object has no groups for view or edit set, it should be open to all authenticated users.

As mentioned, some models include Many to Many relations or One to Many relations.  It is important to be able to filter these relations as well, such as when displaying an ImageFolder, only the accessible child folders and contained images should be shown.  This includes filtering django-treenode queries for getting roots, children, etc.

As an example, an ImageFolder a user can view may contain child ImageFolder which the user cannot view.  It may contain Images which a user can view, and some they cannot.  The system should be able to handle this.

Finally, I want this to be simple and performant, so consider queries which return only the subset of data needed to filter another queryset, for example and designate as much filtering to the database as possible to reduce the query count.  Also consider prefetch_related and selected_related.  We support SQlite and Postgres at this point.

Any permission or user checks should also ensure the user is marked as active.

If you can, format your reply in a Markdown file, using diagrams and callouts from MkDocs Material to illustrate any point.  It may be helpful to diagram the object relations.  If you display any code, please use Django's class based views.  Provide examples of ListView, DetailView and UpdateView, and how to check permissions/get accessible objects in those classes, including related fields.  Where possible, also include Python type hinting.  Finally, any template code should use Jinja2 syntax and use Bootstrap 5 for styling.
